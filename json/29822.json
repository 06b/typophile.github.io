{
  "id": "29822",
  "title": "Lucida Grande vs. Lucida Sans",
  "forum": "General Discussions",
  "tags": [
    "General Discussions"
  ],
  "content": "50 points to anyone who can outline in detail the differences (besides character sets\\*) between [Lucida Grande](http://web.archive.org/web/20150426000815/http:/en.wikipedia.org/wiki/Lucida_Grande) and [Lucida Sans Unicode](http://web.archive.org/web/20150426000815/http:/en.wikipedia.org/wiki/Lucida_Sans_Unicode). Go!\n\n\\* In addition to the entire Lucida Sans character set, Lucida Grande supports Arabic and Thai scripts.\n\n",
  "author": "Stephen Coles",
  "time": "29 Nov 2006 — 3:46pm",
  "uid": "103",
  "comments": [
    {
      "time": "29 Nov 2006 — 5:42pm",
      "content": "why just 50 points? :)\n\n"
    },
    {
      "time": "2 Dec 2006 — 9:35am",
      "content": "I guess nobody wants my points. Perhaps I should offer a \"real\" prize?\n\n"
    },
    {
      "time": "2 Dec 2006 — 12:31pm",
      "content": "Why not load both fonts into FontLab and do a manual 'diff'? Or drop Mr Bigelow a mail and ask him?\n\nI believe the answer will be \"no real difference\" unless Apple needed to mess with vertical metrics for UI purposes.\n\nCheers, Si\n\n"
    },
    {
      "time": "2 Dec 2006 — 1:24pm",
      "content": "My guess would be it is a legal loophole that had to be danced for differing platforms. Maybe Bigelow & Holmes cut a different deal with Apple and MS.\n\nChrisL\n\n"
    },
    {
      "time": "4 Dec 2006 — 8:49am",
      "content": "There are more differences in character sets than just Arabic and Thai. Lucida Grande has many more characters that Lucida Sans Unicode is missing (I'm comparing Lucida Grande version 5.0d8e1 with Lucida Sans Unicode version 2.03). Lucida Sans Unicode is pretty old and my guess is that Microsoft did not get it updated recently. So Lucida Grande supports some Unicode ranges that were not yet assigned at the time when Lucida Sans Unicode was built, for example Latin Extended Additional (starting with U+1E00 Ḁ). L. Grande has polytonic Greek, many more historical and Asian Cyrillic characters (e.g. U+0468 Ѩ), many more Latin Extended-B characters (e.g. U+0222 Ȣ). The design of some characters has been corrected or updated, e.g. the commaaccent characters (e.g. U+0137 ķ), the phonetic U+0251 (ɑ), the Cyrillic U+0444 (ф) and U+046A (Ѫ), and many others.\n\nThe hinting differs greatly: the stems in Lucida Sans Unicode turn into two pixels at 15 ppem while in Lucida Grande they only do so at 18 ppem. The 17 ppem size of Lucida Grande uses 1-pixel stems plus antialiasing, which does not at all work well in the normal Windows 2000/XP rasterizer. This is evidence that the font has not been hinted with Windows in mind but was specifically hinted for Mac OS X where it works great. However, in Windows XP ClearType, it is Lucida Grande that performs better than Lucida Sans Unicode, which evidently has been \"overhinted\" and displays a weird high linear contrast up to 24 ppem, while the stems in Lucida Grande appear pleasantly equalized already from 18 ppem on.\n\nThese would be the first quick observations from my side.\n\nA.\n\n"
    },
    {
      "time": "4 Dec 2006 — 10:35am",
      "content": "\\> hinted for Mac OS X\n\nHuh? I thought we established that OSX very rarely supports  \nhinting, and apparently in no case for anything above 12 PPEM.\n\nhhp\n\n"
    },
    {
      "time": "4 Dec 2006 — 10:43am",
      "content": "Hrant,\n\nThe 12 ppem threshold is customizable.\n\nA.\n\n"
    },
    {
      "time": "4 Dec 2006 — 10:51am",
      "content": "But 12 is the max! And the default (which virtually nobody will change) is... 8!\n\nhhp\n\n"
    },
    {
      "time": "15 Jan 2007 — 11:10am",
      "content": "Unfortunately, Lucida Grande does not support italics, whereas Lucida Sans does!\n\nMark\n\n"
    },
    {
      "time": "15 Jan 2007 — 11:17am",
      "content": "\\>Unfortunately, Lucida Grande\n\nIf Mac OS does not use italics in the UI, then there was likely no incentive for Apple to license the italic verison of the font from Bigelow and Holmes.\n\nOnly problem with this approach is that third-party apps may not follow that convention and you'll get fake italics - unless MacOS is clever enough to block this.\n\n"
    },
    {
      "time": "15 Jan 2007 — 11:23am",
      "content": "It pains me that there are no italics. Microsoft consistently bests Apple in the typography realm, the very thing Steve claims to have revolutionized for the computer. It's sad.\n\nSo far, Adam wins the ham. But can anyone tell me why the name difference?\n\n"
    },
    {
      "time": "15 Jan 2007 — 11:36am",
      "content": "There may have been issues around the Unicode trademark, or maybe Apple just wanted to think different with respect to the name, but most likely I think the name relates to Peter Lofting's Starbucks preference.\n\n"
    },
    {
      "time": "16 Jan 2007 — 2:10am",
      "content": "another ham goes to sii for being a ham\n\n"
    },
    {
      "time": "16 Jan 2007 — 5:45am",
      "content": "Si is going to have a large pig roast with all that ham you keep sending :-)\n\nChrisL\n\n"
    },
    {
      "time": "16 Jan 2007 — 6:59am",
      "content": "On a fully unrelated note: we have Warnock Pro now. When can we expect Gates Premier, Bullmer Ultra or Jobs Pro?\n\nA.\n\n"
    },
    {
      "time": "16 Jan 2007 — 7:01am",
      "content": "\\>or Jobs Pro?\n\nAs mentioned elsewhere iFont is already taken, not that would stop Apple ;-)\n\n"
    },
    {
      "time": "24 Jan 2007 — 3:42pm",
      "content": "sii said: \"Only problem with this approach is that third-party apps may not follow that convention and you’ll get fake italics - unless MacOS is clever enough to block this.\"\n\nIn Mac OS X, as far as I am aware, this is indeed true.  \nBy default in Cocoa apps, and Carbon apps that use ATSU (which is about 99% of them these days), if the current face has no italic/oblique or bold available, the respective menu items/buttons will be dimmed.  \nNonetheless, software can programmatically request a closest match for a face that has no italic, which will return an italic face from similar font family that has the same traits (proportional, serif, same weight, &c.). The app can then accept this alternative, or reject it and have an oblique algorithmically generated instead.  \nFor apps that use QuickDraw for text (BBEdit \\< version 8, maybe others?) oblique is always generated if one doesn't exist.\n\n"
    }
  ]
}
