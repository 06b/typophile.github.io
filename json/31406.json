{
  "id": "31406",
  "title": "Adobe OT PS Standard Names (CFF)",
  "forum": "Build",
  "tags": [
    "Build"
  ],
  "content": "I am building an OpenType font and right now I am using the \"Adobe OT PS Standard Names (CFF)\" ecoding table...\n\nMost of the glyphs make sense to me... but I am not sure what a \"colonmonetary\" or \"onefitted\" glyp should look like.\n\nAlso, is the glyph for \"Rupiah\" a cap R and lower case p? Or is there something more sophisticated?\n\n",
  "author": "Robby Woodard",
  "time": "13 Feb 2007 — 9:35am",
  "uid": "703",
  "comments": [
    {
      "time": "13 Feb 2007 — 9:36am",
      "content": "And what are the superior a through t for?\n\nR\\V\n\n"
    },
    {
      "time": "13 Feb 2007 — 11:51am",
      "content": "It's not absolutely essential to know what the glyphs are for, just check out what they look like in some standard OT fonts. Adobe bundles such with CS, and Gentium is another good reference (it's free, too).\n\nIf you must know:  \n [http://www.microsoft.com/typography/otspec/features\\_ae.htm](http://web.archive.org/web/20131017023109/http:/www.microsoft.com/typography/otspec/features_ae.htm \"http://www.microsoft.com/typography/otspec/features\\_ae.htm\")\n\n"
    },
    {
      "time": "13 Feb 2007 — 11:23pm",
      "content": "The colonmonetary is the \"colon\" currency symbol, which looks like a C with two diagonal bars through it. Because it's a currency symbol, it's commonly designed on tabular widths (that is, the same as your tabular figures).\n\nThe onefitted is the proportional version of the numeral one.\n\nBut as Nick says, you can learn a lot just by looking at the glyphs in an existing font.\n\nCheers,\n\nT\n\n"
    },
    {
      "time": "21 Feb 2007 — 12:32am",
      "content": "Robby,\n\nplease don't use the glyph names from the \"Adobe OT PS Standard Names (CFF)\" encoding. Weird as it may seem, they're not compatible with Adobe's current recommendations for glyph naming. This encoding lists names that are internally represented by numbers rather than names in a CFF table.\n\nAdam\n\n"
    },
    {
      "time": "21 Feb 2007 — 2:11am",
      "content": "Adam,\n\nThat's not quite right. The correct thing to say is, do not use the “Adobe OT PS Standard Names (CFF)” encoding. This is because it is safe to use glyph names from that encoding, **as long as** they're also present in the _Adobe Glyph List For New Fonts_ [http://partners.adobe.com/public/developer/en/opentype/aglfn13.txt](http://web.archive.org/web/20131017023109/http:/partners.adobe.com/public/developer/en/opentype/aglfn13.txt \"http://partners.adobe.com/public/developer/en/opentype/aglfn13.txt\")\n\nThis means that, only the glyph names listed below should NOT be used.\n\n_Note:_ **fi** and **fl** are between parentheses because Mac OS X (as of 10.4.8) still relies in glyph names (instead of the 'cmap' table). This means that if the font doesn't contain these two glyph names, the OS will perform font-flaback on the characters U+FB01 and U+FB02.\n\n(109 fi)  \n(110 fl)  \n150 onesuperior  \n164 twosuperior  \n169 threesuperior  \n229 exclamsmall  \n230 Hungarumlautsmall  \n231 dollaroldstyle  \n232 dollarsuperior  \n233 ampersandsmall  \n234 Acutesmall  \n235 parenleftsuperior  \n236 parenrightsuperior  \n239 zerooldstyle  \n240 oneoldstyle  \n241 twooldstyle  \n242 threeoldstyle  \n243 fouroldstyle  \n244 fiveoldstyle  \n245 sixoldstyle  \n246 sevenoldstyle  \n247 eightoldstyle  \n248 nineoldstyle  \n249 commasuperior  \n250 threequartersemdash  \n251 periodsuperior  \n252 questionsmall  \n253 asuperior  \n254 bsuperior  \n255 centsuperior  \n256 dsuperior  \n257 esuperior  \n258 isuperior  \n259 lsuperior  \n260 msuperior  \n261 nsuperior  \n262 osuperior  \n263 rsuperior  \n264 ssuperior  \n265 tsuperior  \n266 ff  \n267 ffi  \n268 ffl  \n269 parenleftinferior  \n270 parenrightinferior  \n271 Circumflexsmall  \n272 hyphensuperior  \n273 Gravesmall  \n274 Asmall  \n275 Bsmall  \n276 Csmall  \n277 Dsmall  \n278 Esmall  \n279 Fsmall  \n280 Gsmall  \n281 Hsmall  \n282 Ismall  \n283 Jsmall  \n284 Ksmall  \n285 Lsmall  \n286 Msmall  \n287 Nsmall  \n288 Osmall  \n289 Psmall  \n290 Qsmall  \n291 Rsmall  \n292 Ssmall  \n293 Tsmall  \n294 Usmall  \n295 Vsmall  \n296 Wsmall  \n297 Xsmall  \n298 Ysmall  \n299 Zsmall  \n301 onefitted  \n302 rupiah  \n303 Tildesmall  \n304 exclamdownsmall  \n305 centoldstyle  \n306 Lslashsmall  \n307 Scaronsmall  \n308 Zcaronsmall  \n309 Dieresissmall  \n310 Brevesmall  \n311 Caronsmall  \n312 Dotaccentsmall  \n313 Macronsmall  \n315 hypheninferior  \n316 Ogoneksmall  \n317 Ringsmall  \n318 Cedillasmall  \n319 questiondownsmall  \n326 zerosuperior  \n327 foursuperior  \n328 fivesuperior  \n329 sixsuperior  \n330 sevensuperior  \n331 eightsuperior  \n332 ninesuperior  \n333 zeroinferior  \n334 oneinferior  \n335 twoinferior  \n336 threeinferior  \n337 fourinferior  \n338 fiveinferior  \n339 sixinferior  \n340 seveninferior  \n341 eightinferior  \n342 nineinferior  \n343 centinferior  \n344 dollarinferior  \n345 periodinferior  \n346 commainferior  \n347 Agravesmall  \n348 Aacutesmall  \n349 Acircumflexsmall  \n350 Atildesmall  \n351 Adieresissmall  \n352 Aringsmall  \n353 AEsmall  \n354 Ccedillasmall  \n355 Egravesmall  \n356 Eacutesmall  \n357 Ecircumflexsmall  \n358 Edieresissmall  \n359 Igravesmall  \n360 Iacutesmall  \n361 Icircumflexsmall  \n362 Idieresissmall  \n363 Ethsmall  \n364 Ntildesmall  \n365 Ogravesmall  \n366 Oacutesmall  \n367 Ocircumflexsmall  \n368 Otildesmall  \n369 Odieresissmall  \n370 OEsmall  \n371 Oslashsmall  \n372 Ugravesmall  \n373 Uacutesmall  \n374 Ucircumflexsmall  \n375 Udieresissmall  \n376 Yacutesmall  \n377 Thornsmall  \n378 Ydieresissmall  \n379 001.000  \n380 001.001  \n381 001.002  \n382 001.003  \n383 Black  \n384 Bold  \n385 Book  \n386 Light  \n387 Medium  \n388 Regular  \n389 Roman  \n390 Semibold\n\n"
    },
    {
      "time": "21 Feb 2007 — 11:08am",
      "content": "Indeed Miguel, that's what I meant. Not to say that none of your glyphnames may appear in the “Adobe OT PS Standard Names (CFF)” encoding, but that this encoding as a whole is not a good source for \"good glyph names\".\n\nA.\n\n"
    },
    {
      "time": "21 Feb 2007 — 4:49pm",
      "content": "What do you now recommend naming small caps, old style, superior, and inferior numbers?\n\n"
    },
    {
      "time": "21 Feb 2007 — 6:46pm",
      "content": "William, you can find Adobe's recommendations for glyph names on these two pages:\n\n— [Unicode and Glyph Names](http://web.archive.org/web/20131017023109/http:/partners.adobe.com/public/developer/opentype/index_glyph.html)  \n— [Glyph Names and Current Implementations](http://web.archive.org/web/20131017023109/http:/partners.adobe.com/public/developer/opentype/index_glyph2.html)\n\nThe short answer is, read [section 6](http://web.archive.org/web/20131017023109/http:/partners.adobe.com/public/developer/opentype/index_glyph.html#6) of Unicode and Glyph Names page.\n\nFor small caps\\*, for example, **a.small** , **aacute.sc** , or **agrave.smcp** are all sound names.\n\n\\* If you care about unique glyph-character correspondence, you'll need to have two sets of small cap glyphs: one that matches the lowercase set, and another that matches the uppercase set. This means you'll end up with two small cap 'A's, one named **a.sc** , and another named **A.sc**. The first should be used in the 'smcp' feature, and the second in the 'c2sc' feature, as the code below illustrates:\n\n`feature smcp {\nsub a by a.sc;\n} smcp;`\n\nfeature c2sc {  \nsub A by A.sc;  \n} c2sc;\n\n"
    },
    {
      "time": "21 Feb 2007 — 7:11pm",
      "content": "Thanks, Miguel. Will do.\n\nJust saw your note about 'unique glyph character correspondence'. What difference does this make?\n\n"
    },
    {
      "time": "21 Feb 2007 — 7:38pm",
      "content": "Let's say that you decide to only have **a.sc**. This means that your 'c2sc' feature will look like this:\n\n`feature c2sc {\nsub A by a.sc;\n} c2sc;`\n\nIn environments where character codes (Unicode codepoints) need to be reconstructed from glyph names — like when copying text from a PDF, for example — the text string 'AAA' styled with your 'c2sc' feature, will end up being converted to 'aaa', because that's the result of parsing '/a.sc/a.sc/a.sc'.\n\n"
    },
    {
      "time": "22 Feb 2007 — 4:49am",
      "content": "William,\n\nas Miguel said, for casing features, you have three choices:\n\n1. Duplicate your small caps glyphs so that there is one set that corresponds to lowercase glyphs, with names such as \"a.smcp\", \"agrave.smcp\" (or \"a.small\", \"agrave.small\" or \"a.sc\", \"agrave.sc\" but \\*not\\* \"asmall\" or \"agravesmall\") and one set that corresponds to UPPERCASE glyphs, with names such as \"A.c2sc\", \"Agrave.c2sc\" (or \"A.smcp\", \"Agrave.smcp\" or \"A.small\", \"Agrave.small\" or \"A.sc\", \"Agrave.sc\" but \\*not\\* \"Asmall\" or \"Agravesmall\"). In such case, the \"smcp\" feature would replace \"a\" with \"a.smcp\" and the \"c2sc\" feature would replace \"A\" with \"A.c2sc\".\n\n2. Have one set of small caps glyphs named as if they were variants of UPPERCASE glyphs, i.e. \"A.smcp\", \"Agrave.smcp\" (or \"A.small\", \"Agrave.small\" or \"A.sc\", \"Agrave.sc\" but \\*not\\* \"Asmall\" or \"Agravesmall\"). In such case, the \"smcp\" would replace lowercase with those glyphs, and the \"c2sc\" feature would replace uppercase with those glyphs.\n\n3. Have one set of small caps glyphs named as if they were variants of lowercase glyphs, i.e. \"a.smcp\", \"agrave.smcp\" (or \"a.small\", \"agrave.small\" or \"a.sc\", \"agrave.sc\" but \\*not\\* \"asmall\" or \"agravesmall\"). In such case, the \"smcp\" would replace lowercase with those glyphs, and the \"c2sc\" feature would replace uppercase with those glyphs.\n\nAdobe follows variant 1, which allows them 100% glyph correspondence. With class kerning and composites, handling these duplicate glyphs is pretty easy in the production process. Also, it's easier to write OpenType Layout features because your font would have suplicate \"S.c2sc\" and \"s.smcp\" (as there is both \"S\" and \"s\" in your font), but you'd only need \"germandbls.smcp\" as there is only \"germandbls\" without an uppercase variant).\n\nWith this variant, if my source text reads \"The typeface Constantia was designed by John Hudson\" and I style \"Constantia\" and \"John Hudson\" with \"all small caps\" (i.e. both \"c2sc\" and \"smcp\" are applied), the document goes to PDF and is then retrieved by Acrobat or Google, the text will still read \"The typeface Constantia was designed by John Hudson\", so there is no semantic loss.\n\nVariant 2 is also acceptable. If my source text reads \"The typeface Constantia was designed by John Hudson\" and I style \"Constantia\" and \"John Hudson\" with \"all small caps\", the retrieved text will read \"The typeface CONSTANTIA was designed by JOHN HUDSON\". There is some semantic loss but all-uppercase text is always orthographically correct. (After all, small caps are just smaller-sized lowercase letters)\n\nVariant 3 is the least preferrable. If my source text reads \"The typeface Constantia was designed by John Hudson\" and I style \"Constantia\" and \"John Hudson\" with \"all small caps\", the retrieved text will read \"The typeface constantia was designed by john hudson\". This semantic loss is unacceptable becauase all-lowercase text is not orthographically correct in this case.\n\nAs or the glyphname suffixes, you can use whatever you want: \"a.smcp\", \"a.small\", \"a.sc\", \"a.SMALLC\" etc. are all acceptable for the small caps \"a\" glyph. \"one.onum\", \"one.osf\", \"one.oldstyle\", \"one.lc\", \"one.o\" are all acceptable for the old-style/lowercase figure 1.\n\nFontlab Ltd. recommends to use glyphname suffixes that are tied to OpenType Layout feature tags that the glyphs are used in (or primarily used in). So if you follow variant 1 of devising small caps (duplicate sets), You can name the glyphs \"A.c2sc\" and \"a.smcp\". Then it's instantly obvious that the OpenType Layout feature definition will be\n\n`feature c2sc {\n  sub A by A.c2sc;\n} c2sc; `\n\nfeature smcp {  \n sub a by a.smcp;  \n} smcp;\n\nIf your font has just two sets of figures (lining with Unicode codepoints, and oldstyle as variants), You can name the oldstyle figures \"one.onum\" so the feature definition would be:\n\n`feature onum {\n  sub one by one.onum;\n} onum; `\n\nIf a glyph is only accessed through a combination of features, e.g. if you have four sets of figures (tabular lining, tabular oldstyle, proportional lining, proportional oldstyle), you can use the names \"one\" (for the tabular lining), \"one.onum\\_tnum\" (for the tabular oldstyle), \"one.lnum\\_pnum\" (for the proportional lining) and \"one.onum\\_pnum\" (for the proportional oldstyle). In the suffix, you can concatenate the OpenType Layout tags using underscore, and the sequence of these layout tags are alphabetical. Similarly, if you have a stylistic variant of a small caps \"R\", you can call it \"R.c2sc\\_ss01\".\n\nIf the same glyph is used in several features independantly (e.g. a stylistic variant of \"R\" could be used in \"ss01\" and \"salt\"), you can pick the suffix that is most specifically tied to the glyph. \"ss01\" seems to be more specific that \"salt\" so you can call the glyph \"R.ss01\".\n\nWhen it comes to ligatures, Fontlab Ltd. currently recommends using suffixes in these as well. The standard \"fi\" ligature can be named \"f\\_i.liga\" while a discretionary \"st\" ligature can be named \"s\\_t.dlig\". This keeps your glyphnames in order and allows you to quickly allocate the ones you need.\n\nFor localized glyph variants, Fontlab Ltd. suggests using the OpenType language tag, i.e. the Serbian \"b\" glyph would be named \"afii10066.SRB\".\n\nRegards,  \nAdam Twardoch  \nFontlab Ltd.\n\n"
    },
    {
      "time": "22 Feb 2007 — 5:37am",
      "content": "Once more, thanks to Adam and Miguel for more salient clues in the OpenType feature mystery:-)\n\nChrisL\n\n"
    },
    {
      "time": "22 Feb 2007 — 7:56am",
      "content": "Thanks, Adam, much appreciated.\n\n"
    },
    {
      "time": "22 Feb 2007 — 4:53pm",
      "content": "\\> _For localized glyph variants, Fontlab Ltd. suggests using the OpenType language tag, i.e. the Serbian “b” glyph would be named “afii10066.SRB”._\n\nJust a small note to say, although 'afii10066' is a perfectly legal glyph name, Adobe is moving away from afiiXXXXX glyph names, in favour of uniXXXX (or uXXXX\\*) names. So in the case above 'afii10066.SRB' can be replaced by 'uni0431.SRB' or 'u0431.SRB'.\n\n\\*Currently, Mac OS X (10.4.8) relies on glyph names and doesn't support this form.\n\n"
    },
    {
      "time": "22 Feb 2007 — 9:34pm",
      "content": "_2. Have one set of small caps glyphs named as if they were variants of UPPERCASE glyphs_\n\nSurely this is the only option that should be offered, because it maintains _typographic_ correspondence, i.e. the emphasis of the original document -- in the same way that bold and italic are retained in \"reconstruction\".\n\n_“one.onum\\_tnum”_\n\nThis \"\\_tnum\" seems to be an oxymoron, as the four basic figure groups are presently understood to be:\n\nonum = oldstyle + proportional  \ntnum = oldstyle + tabular  \nlnum = lining + tabular  \npnum = lining + proportional\n\n"
    },
    {
      "time": "22 Feb 2007 — 9:54pm",
      "content": "What about superior/inferior figures?\n\nPresently FontLab names these, eg \"onesuperior\". Should they now be renamed eg \"one.superior\"?\n\n"
    },
    {
      "time": "23 Feb 2007 — 3:47am",
      "content": "Yes, and make sure they get the right Unicode.\n\nU+2070 zero.superior  \nU+00B9 one.superior  \nU+00B2 two.superior  \nU+00B3 three.superior  \nU+2074 four.superior  \nU+2075 five.superior  \nU+2076 six.superior  \nU+2077 seven.superior  \nU+2078 eight.superior  \nU+2079 nine.superior\n\nU+2080 zero.inferior  \nU+2081 one.inferior  \nU+2082 two.inferior  \nU+2083 three.inferior  \nU+2084 four.inferior  \nU+2085 five.inferior  \nU+2086 six.inferior  \nU+2087 seven.inferior  \nU+2088 eight.inferior  \nU+2089 nine.inferior\n\n"
    },
    {
      "time": "23 Feb 2007 — 5:33am",
      "content": "<cite>This \"_tnum\" [in “one.onum_tnum”] seems to be an oxymoron, as the four basic figure groups are presently understood to be:</cite>\n\n<cite>onum = oldstyle + proportional<br>\ntnum = oldstyle + tabular<br>\nlnum = lining + tabular<br>\npnum = lining + proportional</cite>\n\nFollowing the OT numeral feature logic, to address tabular oldstyle figures, both tnum and onum features need to be applied by the application. So mentioning both these features in the glyph name makes this obvious. The table should be:\n\nwidth:  \npnum = proportional  \ntnum = tabular  \n(Each of these features however covers both lnum and onum.)\n\nalignment:  \nlnum = lining  \nonum = oldstyle  \n(Each covers both pnum and tnum.)\n\n"
    },
    {
      "time": "23 Feb 2007 — 6:20am",
      "content": "Miguel,  \nDoes this mean I should change all the types I am currently working on to this new system? I am in the midst of organizing a workflow that is consistant rather than the hodge-podge learn-as-you-go thing I have been doing for the past 2 years. Will all this change again soon or can I bank on it not breaking in use for years to come?\n\nChrisL\n\nPS: Looking forward to meeting you in New York!\n\n"
    },
    {
      "time": "23 Feb 2007 — 7:56am",
      "content": "Hi Chris,  \nI can't guarantee that things won't change in the future. All I can say is that this is the current best practice. Nonetheless, the glyph naming conventions outlined in the links above are pretty solid, so I'd say things are likely not to change significantly in the near future.\n\nSee you soon!\n\n"
    },
    {
      "time": "23 Feb 2007 — 10:08am",
      "content": "\\> onum = oldstyle + proportional  \n\\> tnum = oldstyle + tabular  \n\\> lnum = lining + tabular  \n\\> pnum = lining + proportional\n\nNo no no no :)\n\nThere are two typographic properties of figures:  \na) case, i.e. vertical size and alignment, which can be uppercase (lining) or lowercase (oldstyle/floating)  \nb) width, which can be monospaced (tabular) or proportional.  \nThese properties are controlled \\*independently\\* of each other by OpenType Layout features.\n\nThe \"onum\" feature switches UC figures (\\*lnum) to lc figures (\\*onum). The \"lnum\" does the reverse.\n\nThe \"pnum\" feature switches monospaced figures (\\*tnum) to proportional figures (\\*pnum). The \"tnum\" feature does the reverse.\n\nIf your font has four sets of figures (uppercase monospaced, uppercase proportional, lowercase monospaced and lowercase proportional):\n\n\\* the \"onum\" feature switches from uppercase monospaced to lowercase monospaced and from uppercase proportional to lowercase proportional;  \n\\* the \"lnum\" feature switches from lowercase monospaced to uppercase monospaced and from lowercase proportional to uppercase proportional;  \n\\* the \"pnum\" feature switches from uppercase monospaced to uppercase proportional and from lowercase monospaced to lowercase proportional;  \n\\* the \"tnum\" feature switches from uppercase proportional to uppercase monospaced and from lowercase proportional to lowercase monospaced;\n\nSo, conceptually, you have four sets of figures:  \n\\* \"onum\\_tnum\": lowercase monospaced,  \n\\* \"onum\\_pnum\": lowercase proportional,  \n\\* \"lnum\\_tnum\": uppercase monospaced,  \n\\* \"lnum\\_pnum\": uppercase proportional.\n\n\\*One\\* of these figure sets would be your \\*default\\* figure set, for which you wouldn't use a glyphname suffix and you would assign the Unicode codepoints to them. These could be the uppercase monospaced figures, but could be also a different figure set. For the three remaining sets, you'd use glyphname suffixes.\n\nIf you have four figure sets, each of the four features (onum, pnum, lnum, tnum) should \\*always\\* substitute two sets by two other sets.\n\nMore on this [**here**](http://web.archive.org/web/20131017023109/http:/typophile.com/node/29580?from=64) und [**here**](http://web.archive.org/web/20131017023109/http:/typophile.com/node/29648?from=34).\n\nA.\n\n"
    },
    {
      "time": "23 Feb 2007 — 10:31am",
      "content": "A postscriptum to Miguel's posting:\n\nAccording to the more strict Adobe policy (which separates glyphs inserted through OpenType Layout from glyphs inserted through their Unicode codepoints), your font should have two sets of identical (duplicate) superscript and subscript figures, named and encoded as shown below. This encoding and naming ensures that the original text string will always be accurately reconstructed.\n\n(U+2070) \"uni2070\" and duplicated as (unencoded) \"zero.sups\"  \n(U+00B9) \"onesuperior\" and duplicated as (unencoded) \"one.sups\"  \n(U+00B2) \"twosuperior\" and duplicated as (unencoded) \"two.sups\"  \n(U+00B3) \"threesuperior\" and duplicated as (unencoded) \"three.sups\"  \n(U+2074) \"uni2074\" and duplicated as (unencoded) \"four.sups\"  \n(U+2075) \"uni2075\" and duplicated as (unencoded) \"five.sups\"  \n(U+2076) \"uni2076\" and duplicated as (unencoded) \"six.sups\"  \n(U+2077) \"uni2077\" and duplicated as (unencoded) \"seven.sups\"  \n(U+2078) \"uni2078\" and duplicated as (unencoded) \"eight.sups\"  \n(U+2079) \"uni2079\" and duplicated as (unencoded) \"nine.sups\"  \n(U+2080) \"uni2080\" and duplicated as (unencoded) \"zero.sinf\"  \n(U+2081) \"uni2081\" and duplicated as (unencoded) \"one.sinf\"  \n(U+2082) \"uni2082\" and duplicated as (unencoded) \"two.sinf\"  \n(U+2083) \"uni2083\" and duplicated as (unencoded) \"three.sinf\"  \n(U+2084) \"uni2084\" and duplicated as (unencoded) \"four.sinf\"  \n(U+2085) \"uni2085\" and duplicated as (unencoded) \"five.sinf\"  \n(U+2086) \"uni2086\" and duplicated as (unencoded) \"six.sinf\"  \n(U+2087) \"uni2087\" and duplicated as (unencoded) \"seven.sinf\"  \n(U+2088) \"uni2088\" and duplicated as (unencoded) \"eight.sinf\"  \n(U+2089) \"uni2089\" and duplicated as (unencoded) \"nine.sinf\"\n\n(The \".sups\" and \".sinf\" suffixes can be anything else, e.g. \".superior\" and \".inferior\" etc.)\n\nA more economic way would be just one set of glyphs (just like you'd only use one set of small cap glyphs, \"A.smcp\"). This naming and encoding does not guarantee 100% reconstruction of the original string (because e.g. U+2070 will be reconstructed as U+0030).\n\n(U+2070) \"zero.sups\"  \n(U+00B9) \"one.sups or \"onesuperior\"  \n(U+00B2) \"two.sups\" or \"twosuperior\"  \n(U+00B3) \"three.sups\" or \"threesuperior\"  \n(U+2074) \"four.sups\"  \n(U+2075) \"five.sups\"  \n(U+2076) \"six.sups\"  \n(U+2077) \"seven.sups\"  \n(U+2078) \"eight.sups\"  \n(U+2079) \"nine.sups\"  \n(U+2080) \"zero.sinf\"  \n(U+2081) \"one.sinf\"  \n(U+2082) \"two.sinf\"  \n(U+2083) \"three.sinf\"  \n(U+2084) \"four.sinf\"  \n(U+2085) \"five.sinf\"  \n(U+2086) \"six.sinf\"  \n(U+2087) \"seven.sinf\"  \n(U+2088) \"eight.sinf\"  \n(U+2089) \"nine.sinf\"\n\nAdam\n\n"
    },
    {
      "time": "23 Feb 2007 — 11:17am",
      "content": "_According to the more strict Adobe policy (which separates glyphs inserted through OpenType Layout from glyphs inserted through their Unicode codepoints), your font should have two sets of identical superscript and duplicated as subscript figures_\n\nThere's something wrong here.  \nThere's no need for all this redundancy in the font -- why can't the layout application use Unicode codepoints for determining OpenType layout features?\n\n_No no no no :)_\n\nAdam, Karsten, I understand the principle of \"two variables produces four instances\", and have made dozens of OT fonts with four sets of figures that work just fine.\n\nI came to the conclusion that  \n\"onum = oldstyle + proportional\"  \nby looking at the way characters were named in Adobe fonts, i.e. \"oneoldstyle\", and _figured_ the rest out from there.\n\nLooks like Adobe made a mistake by coming up with run-on names such as \"asmall\", \"oneinferior\", and \"oneoldstyle\" -- so don't roll your eyes at me, and how about admitting it?\n\n\\*\\*\\*\n\nAdam, please stop refering to \"monospaced\", \"lowercase\" and \"uppercase\" figures.  \nThe correct terms are \"tabular\", \"oldstyle\" and \"lining\", cast in concrete as OpenType features!  \n [http://www.microsoft.com/typography/otspec/features\\_ae.htm](http://web.archive.org/web/20131017023109/http:/www.microsoft.com/typography/otspec/features_ae.htm \"http://www.microsoft.com/typography/otspec/features\\_ae.htm\")\n\nWhat is the point of having standards if you don't stick with them?\n\nYou guys are making this up as you go along, changing your minds all the time.\n\nNow I have to encode a simple \"alternate set\" as:\n\n- Salt  \n- Titling  \n- SS01\n\n...just to get it to work in past, present, and future versions of CS software!\n\nSure, it's software, and the bugs can always be fixed, but this thing is getting out of hand -- the kind of glyph proliferation that has been happening to the \\*ideal\\* opentype font in recent months is ridiculous. It's coming at me from every direction -- language support, legacy application support, \"reconstruction\" support.\n\nWhat type designers -- and the font industry -- need is some good standard templates, not to have to figure things out for themselves on constantly shifting terrain.\n\n"
    },
    {
      "time": "23 Feb 2007 — 11:36am",
      "content": "<cite>Adam, Karsten, I understand the principle of “two variables produces four instances”, and have made dozens of OT fonts with four sets of figures that work just fine.</cite>\n\nSorry, I know. I just feared the table would irritate people who still have to fumble out how it works. (The logic of numeral feature styles is rather strange at first glance.)\n\n<cite>What type designers — and the font industry — need is some good standard templates, not to have to figure things out for themselves on constantly shifting terrain.</cite>\n\nMy impression is that this will continue to be the status quo until finally Microsoft will come up with truely OT-savvy\\* applications (not a mere WPF, but WPF used by Word &c) -- of course with their own interface to access OT features. And it may take one or two more steps until Apple, Adobe, MS finally assimilate their slightly different approaches, so that user can use OT fonts the same way throughout different OSses and applications. No idea what this means in terms of years.  \nProve that I am wrong and I'll be happy.&nbsp;&nbsp;:)\n\n"
    },
    {
      "time": "23 Feb 2007 — 11:37am",
      "content": "Would it be possible to make some sort of a software matrix that would reside with the systems font engine that would contain all the assorted figure naming conventions and point them all to the same glyph rather than cramming all this redundancy into each and every font? It would function like a Rosetta Stone and could work like a substitution feature where you might say:  \nSub glyph names a b c d for glyph Z or unicode number XXXX. This would take the hex off of legacy fonts and put it on the system software which changes every year anyway.\n\nChrisL\n\n"
    },
    {
      "time": "23 Feb 2007 — 1:34pm",
      "content": "Nick,\n\ndid you test your fonts in various applications that support advanced typographic OpenType Layout features, or just in Adobe applications? One shouldn't presume that one particular implementation is enough to test against. (For example, do you test your features in TextEdit on Mac OS X 10.4? Or in Mellel?) BTW, I'm not implying that there is something wrong with \\*your\\* fonts. I haven't seen your OT code, and perhaps everything is all-right with it.\n\n\"You guys are making this up as you go along, changing your minds all the time.\" — I read some bitterness in what you're saying, but I believe you're being a bit naiive. I think you expect that some superminds behind the scenes had figured everything out back in 1999 (when OpenType was introduced), envisioned all kinds of typographic uses and cases for the layout features, all kinds of problems that a developer may run into. But of course, this was never the case. In the past years, OpenType has always been a work in progress. This is normal: when the specification was written, there were practically no applications that used it (except the Microsoft complex-script engines for Arabic, Indic scripts etc.), and there were only a handful fonts. When you look at the features as they were defined in Adobe Garamond Pro (one of the first OpenType fonts made by Adobe) and in Palatino Linotype (one of the first OpenType fonts with advanced typographic features made by Microsoft), there are a \\*lot\\* of bad practices.\n\nI'm a person who's been trying to monitor whatever the \"big guys\" (Adobe, Microsoft, Apple) are doing, communicate with some independent developers (such as John Hudson), add my modest bit of knowledge about typesetting practice and about linguistic aspects, and distill this into designer-comprehensible talk. What I'm suggesting are \"best practices as I see them\", or perhaps \"best practices as Fontlab Ltd. sees them\". There is a certain amount of subjectivity -- you can always do this or that \\*differently\\* if you know why you're doing this. There are cases where you don't want to supply glyphnames at all in your fonts, there are cases where you want to write some features differently from what I recommend etc. I've done some thinking about this topic, but everyone is welcome, or actually even encouraged, to do his own thinking.\n\nYou're free to accept my advice, and you're free to reject it. You're welcome and encourage to comment and challenge my advice and my thinking -- as I never claimed that I know it all.\n\nBest,  \nAdam\n\n"
    },
    {
      "time": "23 Feb 2007 — 4:42pm",
      "content": "I'm not bitter Adam, just frustrated working on the never-ending font, as I discover something new each month that should be included or changed.\n\nBut perhaps I'm naiive, in wanting to produce fonts that function perfectly, as that no longer appears to be possible, and they're turning into just another piece of buggy software that needs constant upgrades to keep all the features working properly and in sync with applications.\n\nI treat your recommendations very seriously, and as I've said before, you are in the perfect position, with FontLab, to take the lead and establish some standardized OpenType font formats that independent foundries can use. Nobody wants to be the little shop whose customers have to figure out its quirks. And the customers -- the typographers -- would like to see some consistency, so that they don't have to read a pdf manual for each font just to figure out how the features of Foundry A differ from Foundry B.\n\nI'd love to be able to scroll down to a \"FontLab Latin Text\" codepage and have all the characters (including smcp, sinf, sups, etc.) pop up in grey, with proper unicoding and feature sets pre-built. The I click on \"one.superior\", and FontLab renders a scaled, positioned version of the \"one.lnum\\_pnum\" glyph in the character position. Pre-built family-naming would be handy too.\n\n"
    },
    {
      "time": "27 Feb 2007 — 4:39am",
      "content": "\\> I’d love to be able to scroll down to a “FontLab Latin  \n\\> Text” codepage and have all the characters (including  \n\\> smcp, sinf, sups, etc.) pop up in grey, with proper  \n\\> unicoding and feature sets pre-built. The I click  \n\\> on “one.superior”, and FontLab renders a scaled,  \n\\> positioned version of the “one.lnum\\_pnum” glyph in  \n\\> the character position. Pre-built family-naming  \n\\> would be handy too.\n\nHow much would you be willing to pay for this functionality?\n\nA.\n\n"
    },
    {
      "time": "27 Feb 2007 — 8:06am",
      "content": "How much would FontLab be willing to charge?\n\n"
    },
    {
      "time": "2 Mar 2007 — 7:17am",
      "content": "Nick,\n\nseriously, there are various options available -- scripts and extension files provided by indepenetent developers, core functionality within FontLab Studio, a separate tool. They could be custom-tailored or general-use.\n\nA.\n\n"
    },
    {
      "time": "2 Mar 2007 — 7:33am",
      "content": "/Track/\n\n"
    },
    {
      "time": "3 Mar 2007 — 8:50pm",
      "content": "<cite>I’m not bitter Adam, just frustrated working on the never-ending font, as I discover something new each month that should be included or changed.</cite>\n\nAlthough there are things that have changed, including Adobe's choices for glyph names, there has never been any significant change in how we associate glyphs and features in this area (onum/tnum/lnum/pnum). Not since we shipped our first featureful OpenType fonts seven years ago.\n\nCheers,\n\nT\n\n"
    }
  ]
}
