{
  "id": "33531",
  "title": "Spiro 0.01 release",
  "forum": "General Discussions",
  "tags": [
    "General Discussions"
  ],
  "content": "Typophiles,\n\nAfter years of talking about a spiral-based curve editing tool, the provisional patent application is filed, and I've made an unpolished release of the stuff I have now. Brave souls can check it out to see what I've been talking about. Others among you may choose to wait until there's a release that's not quite as spartan.\n\nI made a Mac build, but loading and saving is more or less not implemented (you can kinda make it work using the commandline, but it really needs a file dialog). Background images (for tracing) are not supported yet either.\n\nThe solver has also not been tuned for numerical robustness, so when you play around with it, you'll often see it fail to solve the spline. It does work reliably when the pattern plate represents a real font shape rather than random points, though.\n\nIt's free software (GPL), and patches for improvements are greatly appreciated.\n\n[http://levien.com/spiro/](http://web.archive.org/web/20150318051842/http:/levien.com/spiro/ \"http://levien.com/spiro/\")\n\n",
  "author": "raph",
  "time": "5 May 2007 — 1:19am",
  "uid": "4406",
  "comments": [
    {
      "time": "5 May 2007 — 3:17am",
      "content": "Great stuff, congrats! I see this as a better, more useful alternative to the sketch mode in Fontlab.\n\n"
    },
    {
      "time": "5 May 2007 — 9:04am",
      "content": "Great stuff! Should speed up a 'start designing directly on the computer' sort of a work process. Will it be compatible with UFO's or Fontlab files?\n\n"
    },
    {
      "time": "5 May 2007 — 10:30am",
      "content": "Great program. I did some quick sketching to figure out how it works. However on the Mac version I'm getting a few anomalies, though I'm not sure if it's Mac-specific or not (though they are pretty. They occur when I'm dragging points around, and and in drag randomly at certain points the design will \"expload\" into some of the forms you see below. If you need any help with the Mac OS X programming side I'd be willing to help out if you'd like.\n\n ![](http://web.archive.org/web/20150318051842im_/http:/typophile.com/files/spirosample1_5488.png)\n  \n\n ![](http://web.archive.org/web/20150318051842im_/http:/typophile.com/files/spirosample2_5343.png)\n  \n\n ![](http://web.archive.org/web/20150318051842im_/http:/typophile.com/files/spirosample3_4194.png)\n  \n_«El futuro es una línea tan fina que apenas nos damos cuenta de pintarla nosotros mismos». (La Luz Oscura, por Javier Guerrero)_\n"
    },
    {
      "time": "5 May 2007 — 11:03am",
      "content": "Pretty - but letters, please!\n\nhhp\n\n"
    },
    {
      "time": "5 May 2007 — 11:20am",
      "content": "I would so love to see Adobe license this stuff for Illustrator CS 5.\n\n"
    },
    {
      "time": "5 May 2007 — 11:24am",
      "content": "Congratulations on your release, Raph! Good luck with writing your dissertation---I look forward to reading the math behind these curves.\n\nYou might also want to mention on your web page that ppedit compiles on Linux (and from looking at the Makefile, probably Windows, too). For those who don't want to compile ppedit to try it themselves, let me describe the basics:\n\nCurves are drawn with curve, corner, and tangent points as normal, but there are only on-curve points---no off-curve points. The shape of the interpolated spline can be changed by adding more points to the curve and then moving them. Moving a point added to a Bezier curve is a pain, because then all of the off-curve control points have to be recalculated to make the curve smooth. However, Raph's program recalculates the spline to be smooth as you move the point (this is made easier by using the Cornu spirals, from my understanding), so that you always have a smooth curve. It's actually more intuitive than I thought it would be, but it still takes some getting used to.\n\n"
    },
    {
      "time": "5 May 2007 — 11:57am",
      "content": "Thanks for all the positive feedback!\n\n@guifa: if you want to try your hand at adding open/save dialogs, that would be appreciated (currently, Apple-S just saves into a file called \"plate\"). Just make sure any Mac-specific code is bracketed by #ifdef X3\\_CARBON, so it doesn't break the Linux build.\n\nThe solver is known not to be numerically stable when the angles get big. If you stick with small angles, those pretty but unuseful spirals won't happen. I'm working on a more stable solver, but it's not ready yet. This stuff _is_ rocket science, literally - the math I'm using is based on the calculus of variations, which has applications in computing optimal trajectories for spacecraft.\n\n@hrant: Inconsolata was designed entirely using these spirals, as was Christian Gothic and pretty much all of my work-in-progress for the last year or so. The .plate files for Inconsolata are all posted.\n\nOn the Mac, you can open a .plate file by going to the directory containing ppedit.app, and typing \"./ppedit.app/Contents/MacOS/ppedit u.plate\". Obviously, a real Open dialog would be much more useful.\n\n ![](http://web.archive.org/web/20150318051842im_/http:/typophile.com/files/u_5308.png)\n\n@sgh: the Windows port is started, but far from complete. I probably won't finish it myself, because I've lately become more interested in porting the code to a web app.\n\n@clauses: I'm not able (due to time constraints) to do any of that kind of integration work myself, but would be happy to help others do so. In the case of Fontlab compatibility, for you to be able to edit interactively inside the app, they'd probably need to license the technology. A plug-in or a batch-mode converter could probably be done as a separate module, though, which would be compatible with the free GPL licensing terms.\n\nAnd there's been talk of using the UFO format as a container for the curves, similar to the .plate file but in XML. (It's said that XML is for people who feel that Lisp doesn't have enough parentheses).\n\n@jpad: I would _love_ that, of course.\n\nBecause I'm starting at Google in a couple weeks, I won't be beating the bushes myself to push this technology out into the world. To a large extent, I'm \"throwing the technology over the fence.\" It's an opportunity to see what the community can do with it, both in the free software world (it's being demoed today at LGM in Montreal), and whether users can generate enough interest and excitement to spur proprietary vendors to pony up for a license. It is my experience that companies tend to be _extremely_ reluctant to do such things. I'd like to be proven wrong, but that's the main reason I'm taking a job in the advertising industry rather than trying to make a go on my own with technology licensing.\n\n"
    },
    {
      "time": "5 May 2007 — 12:28pm",
      "content": "Well, I hope the people at inkscape see your work and consider adding it to theirs. Good luck at Google.\n\n"
    },
    {
      "time": "5 May 2007 — 2:14pm",
      "content": "I could see a lot of nice things that could be in an OS X specific build. I'll take a look at the code when I get a chance and see if there's a way I can convert (or maybe it's already being done) the drawing view into an NSView. Once that's done, it seems you basically have everything you need to make a really sharp looking Mac app.\n\nAnd hrant: those are too letters ... for my ... uh... dingbat font.\n\n_«El futuro es una línea tan fina que apenas nos damos cuenta de pintarla nosotros mismos». (La Luz Oscura, por Javier Guerrero)_\n\n"
    },
    {
      "time": "5 May 2007 — 3:59pm",
      "content": "Oh God I'd wish I could program. These new kinds of approaches to designing digital type on the terms of a digital process are needed. The way the hand could draw the 'right' curves on paper is lost in the Bézier approach. Combine what you are doing with something like Metafont and we would have something truly mindblowing. Ahh dreams.\n\n"
    },
    {
      "time": "6 May 2007 — 12:49am",
      "content": "@clauses: It is compatible with FontForge's SFD, and as Fontforge recently added python scripting and native UFO support, you should be able to pipe it through FontForge to UFO and to FontLab. Why you'd want FontLab at all is a mystery to me, though, since Spiro and FontForge is more than capable - just look at Inconsolata :-) Also, regarding MetaFont, I figure the way it goes directly from code to bitmaps is its biggest problem. If it went to (Spiro) outlines, that would allow a \"dreamweaver\" code/design view and workflow.\n\n@guifa: Mac OS X only features would be a shame - I hope it will remain as cross platform as possible\n\n@jpad: I was discussing Inkscape integration with the Inkscape developers [at the LGM today](http://web.archive.org/web/20150318051842/http:/www.libregraphicsmeeting.org/) and its definitely going in, although on a medium time frame - as part of the existing lib2geom efforts.\n\n"
    },
    {
      "time": "6 May 2007 — 1:03am",
      "content": "I didn't mean OS X only features per se. Only that I think it would be possible to encapsulate the spiral view into an NSView, thus making it no different to Interface Builder than an NSTextField. Again, I've not had a look at the source yet (I do plan on it tho) and so I'm not sure how separate you've got the different parts of the app, although if you're heading off to Google I'd imagine it's nicely modularised.\n\nThere are menu options for changing betwixt corner and curve points, etc. With those hooks, it could definitely open up some interesting possibilities if it can be made into a framework, which would still (I'd think) remain quite platform independent as well as make it more accessible to other developers for any number of other applications besides just font-design. If I'm rambling a bit excuse me, it is cinco de mayo (well, now it's seis de mayo).\n\n_«El futuro es una línea tan fina que apenas nos damos cuenta de pintarla nosotros mismos». (La Luz Oscura, por Javier Guerrero)_\n\n"
    },
    {
      "time": "6 May 2007 — 6:24am",
      "content": "\\> Why you’d want FontLab at all is a mystery to me\n\nCome on.\n\n\\> regarding MetaFont, I figure the way it goes directly  \n\\> from code to bitmaps is its biggest problem.\n\nIt's not a problem if you see it for what it is: a combination of glyph descriptor and RIP. But a very real -and somewhat related- problem of Metafont is its foundation on the theory that letters should have skeletons. This is a naive, primitive and fatal fallacy, and one at the heart of chirography as well. It's the reason Computer Modern looks so crappy.\n\nhhp\n\n"
    },
    {
      "time": "6 May 2007 — 8:29am",
      "content": "@guifa: It's an HIView, which is almost the same thing as an NSView.\n\nYou'll find that the code is factored to be quite modular, but perhaps not quite in the way that you'd expect. Writing truly cross-platform apps is hard. If I didn't care about that, I'd have done this as a Cocoa app, in Objective C, using NIB's. As it is, the UI is built procedurally, and there's a layer (x3) which translates that into the code for Carbon or Gtk+2. (it could do Windows too; that's a Small Matter of Programming).\n\nSo, for example, the menu item for \"delete point\" is created thus:\n\n` x3menuitem(menu, \"Delete Point\", \"delp\", \"<cmd>d\");\n`\n\nThe point is that you don't have to do redo all the UI work for each platform. An earlier version (see carbon\\_main.c) did load a NIB, and that was ok, but I like it better the way it is now.\n\n@abattis: _It is compatible with FontForge’s SFD_\n\nNot really. There's a batch-mode converter that spits out .sfd files. It's certainly doable to write a batch-mode converter for (cubic Bezier flavor) UFO's, or whatever FontLab accepts most natively. Given that FontLab is Python-scriptable, it should also be quite feasible to write a non-interactive import plugin that can be selected from the UI. In other words, an \"import spiro plate\" menu item.\n\nThere are different levels of compatibility. Batch-mode conversion is the lowest, interactive editing with lossless round-trip is the highest. If people seriously want to use these tools in production, anything less than that is a time-waster.\n\nAnd as for FontForge, it kinda works for me, but there are lots of features of FontLab I miss, like stroke offset that isn't horribly buggy, Python scripting, a sane UI for OpenType contextual programming, etc. I've also had to fix a few bugs in it. Fortunately, because I am a rocket scientist, I can do that, but for most type designers, I think the experience will be less than fulfilling.\n\n@hrant: _problem of Metafont is its foundation on the theory that letters should have skeletons._\n\nMetafont doesn't force you into that mode. The Computer Modern fonts are all defined as strokes, but AMS Euler is done more or less using the same technology as Adobe Type 1. Of course, Euler doesn't have any of the optical scaling or variation features either.\n\n@clauses: The real power of Spiro comes out when you combine the spline fitter with techniques for variation. I have some ideas on this, which I will write up soon. My experiments thus far have been very encouraging, suggesting that it will be _much_ easier to use than Multiple Master technology. Here's an experiment I did with linear interpolation of the control points to blend a weight axis:\n\n ![](http://web.archive.org/web/20150318051842im_/http:/typophile.com/files/interp_seq_4134.png)\n\nThe advantage of this technique is that all of the blends are guaranteed to have smooth curvature too. Using Beziers, in the general case, there's no guarantee of smoothness of any kind.\n\n"
    },
    {
      "time": "6 May 2007 — 8:52am",
      "content": "Metafont does support outlining and not just expanded strokes, but the only real reason to use Metafont is its parametric abilities, and (please correct me if I'm wrong) these only work with strokes. What would be amazing is if somehow we could use parametrics with outlines; even more amazing would be a GUI for that!\n\nThe variation angle you mention seems very interesting, although  \nI don't get exactly why spirals would be better at it than beziers.\n\n\\> lossless round-trip\n\nDo you really mean that?  \n1) I thought it can't be lossless.  \n2) It really only has to be one-way to be sufficiently useful.\n\nhhp\n\n"
    },
    {
      "time": "6 May 2007 — 11:38am",
      "content": "@hrant: <cite>Metafont does support outlining and not just expanded strokes, but the only real reason to use Metafont is its parametric abilities, and (please correct me if I’m wrong) these only work with strokes.</cite>\n\nMetaPost (essentially MetaFont for Postscript) supports outlines, and of course since everything is scriptable, parametric abilities are available to work with strokes. [MetaType1](http://web.archive.org/web/20150318051842/http:/www.ctan.org/tex-archive/fonts/utilities/metatype1/) is a set of MetaPost macros that makes it easy to make a CFF-based font (Type1 or CFF-flavored OTF). My font [Aurulent Sans](http://web.archive.org/web/20150318051842/http:/typophile.com/node/31970) is being developed using MetaType1. The use of a weight parameter can be seen when comparing the regular and bold weights.\n\n<cite>What would be amazing is if somehow we could use parametrics with outlines; even more amazing would be a GUI for that!</cite>\n\nThe ability to script is much more powerful than just the parametrics, and GUIs aren't very good for representing scripts. If you're just interested in the parametrics, then it might be possible to represent them graphically, but here the main problem is that the dimension of the parameter space is probably too high to represent visually in a meaningful form.\n\n"
    },
    {
      "time": "6 May 2007 — 6:01pm",
      "content": "\\> parametric abilities are available to work with strokes.\n\nSo has anybody designed a MetaPost outline font where the x-height is parametric?\n\n\\> Aurulent Sans ... weight parameter\n\nIt's nice to see such an effort. The question is (and this might be difficult to answer) was it worth the effort, compared to a \"plain\" interpolation setup in FontLab?\n\n\\> the dimension of the parameter space is probably too high to represent visually\n\nMaybe I'm not getting you, but for a font that's meant  \nto be read the parameters can't really stray <cite>too</cite> far...\n\n\\> The ability to script is much more powerful than just the parametrics\n\nBut FontLab has the former, but not the latter,  \nso the <cite>valuable</cite> sort of power is in the latter.\n\nhhp\n\n"
    },
    {
      "time": "6 May 2007 — 8:45pm",
      "content": "I like this a lot, this should be a great option to Bezier editing, hopefully it will make my s (no pun intended) look better!  \nCongratulations, and I think we are in front of the next Pierre Bezier right here...  \nVery honored cheers  \nRodrigo\n\n"
    },
    {
      "time": "6 May 2007 — 10:31pm",
      "content": "@Raph: _And as for FontForge, it kinda works for me, but there are lots of features of FontLab I miss, like stroke offset that isn’t horribly buggy, Python scripting, a sane UI for OpenType contextual programming_\n\n[Python scripting got added to FontForge last week, along with a total rework of OpenType features and lookups.](http://web.archive.org/web/20150318051842/http:/fontforge.sourceforge.net/changelog.html)\n\n"
    },
    {
      "time": "6 May 2007 — 11:41pm",
      "content": "@abattis: _Python scripting got added to FontForge last week_\n\nThat's seriously cool news. I can still imagine that most professional type designers would rather use FontLab though.\n\n@hrant: _\\> the dimension of the parameter space is probably too high to represent visually_\n\nComputer Modern has something on the order of 60 parameters for things ranging from the obvious ascender/descender height to more subtle things like the parameters for the serifs. That's a very high dimensionality of the parameter space, even if the _amount_ of the change is subtle.\n\nThe key to making variation work for people who don't have advanced computer science degrees is to keep the number of dimensions down. Here's an outline of my ideas for that:\n\n1. For optical scaling, use stroke offset for the bulk of the effect, with a little optional squooshing.\n\n2. For things like ascender and descender lengths, allow points to be put on _frames_ which can move independently of the main em. So, then, to lengthen descenders, pull the descender frame (global to the font) down.\n\n3. For everything else, do interpolation. My gut feeling is that 2-dimensional interpolation (the corners of a quadrilateral) is the most that is intuitive to work with, and, if you can keep it to one, that's even better.\n\nThe number of active frames in any one glyph should be no more than three or so. The main thing interpolation is used for is weight (like the above image).\n\nAlso note that one of the most important aspects of optical scaling is the spacing and kerning. That can probably be done using simple interpolation between a \"big\" and a \"little\" size.\n\n@rosaini: Thanks! Nice spirals in your avatar.\n\n"
    },
    {
      "time": "7 May 2007 — 1:21am",
      "content": "@hrant: <cite>So has anybody designed a MetaPost outline font where the x-height is parametric?</cite>\n\nx-height is a parameter in Aurulent Sans, and I imagine it is as well in other MetaType1-designed fonts, such as Antykwa Toruńska, Antykwa Półtawskiego, Kurier, and Iwona.\n\n<cite>The question is (and this might be difficult to answer) was it worth the effort, compared to a “plain” interpolation setup in FontLab?</cite>\n\nTo me, scripting the outline of a glyph is MUCH easier than drawing it graphically. I find it much easier to say \"Put point A here. Put point B here. Put point C here. Put point D 1/3 of the way between B and C. Draw a smooth curve from A to D to E, etc\". That way I don't have to worry about whether the curve is smooth or not, where to put control points, etc. (Well, that's a bit of lie, often I need to give MetaType1 a little bit more help, but not too often.) And if the width changes, or the x-height changes, then the position of point A, etc is automatically recalculated when the scripts are run again.\n\n<cite>The ability to script is much more powerful than just the parametrics</cite>\n\n<cite>But FontLab has the former, but not the latter,<br>\nso the valuable sort of power is in the latter.</cite>\n\nI have never used FontLab, so I don't know its scripting language. However, based on your comment, it sounds like it is not as powerful as MetaType1. Can you do the type of outline construction I described above? The parametric power comes from using the parameters in the construction. Of course, it is also (somewhat) difficult to create construction scripts that capture parameters. See this [discussion](http://web.archive.org/web/20150318051842/http:/typophile.com/node/29008) and this [discussion](http://web.archive.org/web/20150318051842/http:/typophile.com/node/29008) for thoughts on why a more parametric approach has not been more frequently used.\n\n"
    },
    {
      "time": "7 May 2007 — 7:22am",
      "content": "\\> That’s a very high dimensionality of the parameter space\n\nOK. Was that what Stephen was talking about? Also: assuming  \nthe parameters don't interact (too much) couldn't one decide  \nto display/manipulate one or two at a time?\n\n\\> x-height is a parameter in Aurulent Sans\n\nCould we see how [well] it works out?\n\n\\> based on your comment, it sounds like it is not as powerful as MetaType1.\n\nWhat comment?  \nFontLab's scripting is Python, and everybody says it's plenty powerful.\n\nWhat would be nice is to fold in parametric design.\n\n\\> See this discussion and this discussion\n\nThe two links are the same.\n\nhhp\n\n"
    },
    {
      "time": "7 May 2007 — 7:53am",
      "content": "@hrant: <cite>Was that what Stephen was talking about?</cite> (regarding high dimensionality)\n\nYes.\n\n_sgh\\> based on your comment, it sounds like it is not as powerful as MetaType1._\n\nhrant\\> What comment?  \nFontLab’s scripting is Python, and everybody says it’s plenty powerful.\n\nThe comment I was referring to was:\n\n_sgh\\> The ability to script is much more powerful than just the parametrics_\n\nhrant\\> But FontLab has the former, but not the latter,  \nso the valuable sort of power is in the latter.\n\nYou seem to be saying that parametric design cannot be done with FontLab's scripting tools. As I mentioned, I have never used FontLab, so I have no idea what the actual capability is. Just because FontLab uses Python, though, does not mean that the FontLab Python interface allows the needed operations. Possibly more importantly, is whether the interface makes it easy to design glyphs parametrically.\n\nHere's an easy test for someone who knows Python scripting in FontLab: given the parameters of width, cap height, left and right side-bearing, vertical stroke width, and horizontal stroke width, draw a sans serif uppercase H. Then draw an uppercase O. If this can be done easily, then FontLab scripting has the potential for parametric design.\n\n<cite>The two links are the same.</cite>\n\nOops. The two links should have been this [discussion](http://web.archive.org/web/20150318051842/http:/typophile.com/node/29008) and this [discussion](http://web.archive.org/web/20150318051842/http:/typophile.com/node/8194).\n\n"
    },
    {
      "time": "7 May 2007 — 7:56am",
      "content": "_sgh\\> x-height is a parameter in Aurulent Sans_\n\nhrant\\> Could we see how [well] it works out?\n\nWhat would you like to see?\n\n"
    },
    {
      "time": "7 May 2007 — 10:40am",
      "content": "Did anyone ever get to play around with FontChameleon Pro before it was pulled from public consumption? Voices seem to rave about how fantastic it was. I guess it was not fully parametric, but relied to some extent on some predesigned endpoint to interpolate from? The reason I'm thinking about it is the fact that a number of parametric type engines have come and gone through the years. There is Metafont, FontChameleon, Incubator(?), LiveType and some HP stuff i forgot the name of. Why where they never successful? I can certainly understand why Metafont never went of the ground as it's made for the programmer and not for the designer (correct me if I'm wrong here). Is this parametric approach simply too complicated for the designer to take anywhere, or was it just the lack of GUI that kept it off? FontChamelon seemed to go all the way to the user, skipping the designer, which was it's point I guess.\n\n@Raph: That interpolation you showed is exactly what I want.\n\n"
    },
    {
      "time": "7 May 2007 — 11:57am",
      "content": "\\> You seem to be saying that parametric design  \n\\> cannot be done with FontLab’s scripting tools.\n\nNo, I don't know enough to say either way (and I don't see how I implied otherwise). On the other hand Python being a fully capable language shouldn't have a problem. The real problem is that there's not enough money in type for something that hard to happen, at least not quickly.\n\n\\> whether the interface makes it easy to design glyphs parametrically.\n\nTo most people that means a GUI, and the answer is definitely  \nNo in the case of FontLab... but really just as No for anything else.\n\n\\> What would you like to see?\n\nLet's say \"skagy\" varying from a pretty small to a pretty large x-height.\n\nFontChameleon: I think I had a copy once, didn't get to really use it, and  \nthen something quite mysterious happened and we've become deprived.\n\nhhp\n\n"
    },
    {
      "time": "7 May 2007 — 5:16pm",
      "content": "Wow. This is really nice. Kudos for sharing the code. I'm hoping that we'll see more in the future.\n\nAny thoughts on releasing the code under a more permissive license so it can be used in a certain well known commercial app? I realize that there is the remote potential that you might be able to license it, but it would be a real shame if the stuff never got picked up.\n\n"
    },
    {
      "time": "7 May 2007 — 5:52pm",
      "content": "If you need any convincing about the value of this technology, sit down and try to draw an s. It's fantastic. What took me forever to figure out with beziers happened almost automatically here.\n\n ![](http://web.archive.org/web/20150318051842im_/http:/typophile.com/files/s_spiro_5780.png)\n\n"
    },
    {
      "time": "7 May 2007 — 9:33pm",
      "content": "Christian: suffice it to say that I've put a lot of thought into my licensing strategy, and am pretty happy with it.\n\nBasically, if you're a type designer and want to have this kind of curve drawing tool in a production environment, you have four choices:\n\n1. Learn to code and do it yourself.\n\n2. Show some love to the free software community, and encourage them to integrate it into their leading design apps (Inkscape, FontForge).\n\n3. Lobby the proprietary app vendors to license it.\n\n4. Sit on your @ss and hope somebody else does 1-3.\n\nGlad you like it!\n\n"
    },
    {
      "time": "7 May 2007 — 9:36pm",
      "content": "This makes my self esteem rise a million percent. It was done in 10 minutes.\n\n ![](http://web.archive.org/web/20150318051842im_/http:/typophile.com/files/s_6252.gif)\n\nWish I could export it to illutrator and to hell with the pen tool ;)\n\n"
    },
    {
      "time": "8 May 2007 — 4:53am",
      "content": "\\>Million percent\n\nHate to burst your bubble, but your S doesn't have the curves of Christian Robertson's S--and it isn't as good. You can debate how much it is Christian and how much the spiral tools. But here Christian says it was natural and easy for him to get a result with the spiral tools that would have been difficult and laborious with Bezier curves.\n\n"
    },
    {
      "time": "8 May 2007 — 5:58am",
      "content": "This is extremely interesting and I'm sure useful. The \"traditional\" S test, however, is of a specific S. And even before that, the \"traditional\" contour format test is to scan and digitize an FC-339 8 1/4\" French Curve. e.g. [http://www.steinlaufandstoller.com/French%20Curves%20Plastic.htm](http://web.archive.org/web/20150318051842/http:/www.steinlaufandstoller.com/French%20Curves%20Plastic.htm \"http://www.steinlaufandstoller.com/French%20Curves%20Plastic.htm\"), and then, in this case, do post digitization traslations to CB and QB, so you can see it filled to black in output, or on the screen as the case may be.\n\n"
    },
    {
      "time": "8 May 2007 — 6:37am",
      "content": "\\>French Curve\n\nLooking at some internet sites, it seems that the most widely used French Curves are composed of sections of parabolas, hyperbolas, and elipses. These are all conic sections, can be described by quadratic equations, and hence can be drawn perfectly by quadratic bezier curves.\n\nThe Cornu spirals here are different. If I understand it rightly, sections between knots cannot be drawn accurately with either a \\*single\\* quadratic or cubic curve, though of course they can be approximated with multiple curves of either type.\n\nI don't know if the Cornu spiral is on any French Curves.\n\n"
    },
    {
      "time": "8 May 2007 — 8:37am",
      "content": "@dberlow: The fact of a standardized test for drawing ability is most interesting. Do you have a cite in a book or journal for that test? If not, I can always do \"personal communication\".\n\nI took your challenge, starting with an image of the FC-339 from the [C-thru](http://web.archive.org/) site. The drawing took about 8 minutes, and there are a total of 50 points.\n\n ![](http://web.archive.org/web/20150318051842im_/http:/typophile.com/files/fc-339-ppedit_4969.png)\n\nAnd the conversion to Beziers (43 segments, each of which has 3 control points):\n\n ![](http://web.archive.org/web/20150318051842im_/http:/typophile.com/files/fc-339-bez_3491.png)\n\nAnd here it is filled ( [PDF here](http://web.archive.org/web/20150318051842/http:/levien.com/spiro/fc-339.pdf) if you want to print it out).\n\n ![](http://web.archive.org/web/20150318051842im_/http:/typophile.com/files/fc-339-black_6633.png)\n\nHow'd I do?\n\n@William: I believe it is used on some real french curves, because it's one of the relatively few analytical curves that has a nice inflection point in it. But I don't have a good cite. Again, one would be useful.\n\n"
    },
    {
      "time": "8 May 2007 — 9:39am",
      "content": "William, as I explained in the other thread, it's not about evaluating the results out of context, it's about how much effort Raph's method saves. Whether Rodrigo's \"S\" is better or worse than Christian's is irrelevant; the point is to consider how much effort each of them saved in getting to that in-some-way satisfactory result.\n\n\\> the “traditional” contour format test is to scan and digitize ...  \n\\> [http://www.steinlaufandstoller.com/French%20Curves%20Plastic.htm](http://web.archive.org/web/20150318051842/http:/www.steinlaufandstoller.com/French%20Curves%20Plastic.htm \"http://www.steinlaufandstoller.com/French%20Curves%20Plastic.htm\")\n\nWhy does one have to wait 9+ years to be told something this relevant! :-/  \nWhen you think about it though I guess it's common sense. Aaah, hindsight!\n\nBTW, what exactly is the traditional \"S\" test?\n\n\\> ... can be drawn perfectly by quadratic bezier curves.\n\nYet once more: it's not about this being possible  \nor not, it's about this being worth doing or not.  \n\"Perfectly\" should not come into the discussion.\n\nIt's possible to go to the grocery store crawling on  \nyour back, naked. This does not make it worth doing.  \nAnd the \"imperfection\" of using a car, a bicycle or  \nyour feet does not make any of those a bad idea.\n\n\\> The drawing took about 8 minutes, and there are a total of 50 points.\n\nNow this is getting relevant. How much time would it take you to do it with beziers? It would be useful here to ask David to time himself with both methods too, since you'd like to get the view form both ends: somebody used to drawing with cornus more and somebody used to drawing with beziers more.\n\nAlso, some overlays would be very useful, since your \"thresh\" and \"optim\" settings don't mean anything to us. An overlay of the spiral original over the converted bezier, and one of the end result black shape over the original piece of plastic. Please? :-)\n\nhhp\n\n"
    },
    {
      "time": "8 May 2007 — 9:50am",
      "content": "Christian:  \n\\> What took me forever to figure out with  \n\\> beziers happened almost automatically here.\n\nThat implies cornus are better when you're starting out in type design; but an equally important issue is: for somebody with experience with beziers, would you say they're about the same in the end, or do cornus have an advantage there too?\n\n\\> 3. Lobby the proprietary app vendors to license it.\n\nTo me adding cornu support seems like just the ticket to encourage upgrades to FontLab 6... In fact right this minute they might be desperately trying to figure out how to add value to their product to keep the upgrade money coming! That said, an email campaign by users can only help.\n\nBTW Raph: what term should we be using for this - cornus, spirals, or what?  \nSomething short would be great.\n\nhhp\n\n"
    },
    {
      "time": "8 May 2007 — 11:15am",
      "content": "<cite>Hrant: BTW, what exactly is the traditional “S” test?</cite>\n\nDavid will correct me if I'm wrong, but from what I understand from a conversation with Mike Parker, the traditional test administered to someone applying for employment in the Linotype drawing office, in the \"good ol' days,\" was the task of reproducing freehand (I'm talking about drawing here -- pencils and paper, you know) a specific 'S' from a given model typeface, in order to gauge their innate talent and skill.\n\nI don't know if it was the same 'S' each time, or if there was a time limit.\n\n-- K.\n\n"
    },
    {
      "time": "8 May 2007 — 11:26am",
      "content": "Maybe not a strict time-limit, but I'm sure at least an  \ninternal biological stopwatch would've been running! :-)\n\nBTW, isn't today's \"freehand\" direct-digital?\n\nhhp\n\n"
    },
    {
      "time": "8 May 2007 — 12:07pm",
      "content": "@hrant: _An overlay of the spiral original over the converted bezier_\n\n ![](http://web.archive.org/web/20150318051842im_/http:/typophile.com/files/fc-339-overlay_6327.png)\n\nThe Bezier version is a 1px red stroke, and the spiral version is on top in black. You can see a teeny difference on the left hand of the top curve. If you tweak the \"thresh\" parameter, it'll add more Beziers to make the error go as small as you like. I picked the .01 number as the default for my work because the error is just below the threshold of what you can see when you look at the shapes side-by-side. Setting it to .001 adds nine beziers (for a total of 52), and the visual difference becomes undetectable even when zoomed. Btw, if you want to zoom in on the above comparison, I put up a [PDF](http://web.archive.org/web/20150318051842/http:/levien.com/spiro/fc-339-overlay.pdf).\n\nI tried overlaying the black-filled version over the original photo, but I couldn't get anything that seemed as clear as the first image above, partly because of the low contrast of the original. I have done the same thing with letters - maybe I should post some images from that?\n\n_what term should we be using for this - cornus, spirals, or what?_\n\nI kinda like \"spirals\". Cornu spirals are actually only one case. The most general case is a third order polynomial spiral, which I sometimes abbreviate \"spiro\". Incidentally, Cornu didn't invent the spiral bearing his name, Euler did, so they should really be called \"Euler spirals\".\n\n_How much time would it take you to do it with beziers?_\n\nWell, for me to do it wouldn't exactly be fair, because I want my tools to win. But I'd be very interested to learn how long it takes _you,_ Hrant, and whether you're as satisfied with the technical quality.\n\nActually, what I think I'd like to do is pose a real challenge. Maybe a neutral Typophile person (Tiff? Stephen?) could serve as moderator. It would go something like this: the moderator selects a high quality image of a predigital glyph, something like 1000px square, and posts it at a pre-arranged time. Then, people post followups to that thread containing their best shot, using the tools of their choice - Spiro, Illustrator, FontLab, QB's, CB's, IkarusMaster, whatever. Reports of drawing time can be verified by the post timestamp, and then the moderator would judge the quality.\n\nSound like fun? I would write up the results in a section of my thesis, as part of the case I'm trying to make is that spirals are more intuitive, more productive, and more conducive to high-quality results. Going up against the best skills of Typophiles would be a real way to falsifiably test those claims.\n\n"
    },
    {
      "time": "8 May 2007 — 12:20pm",
      "content": "Raph:  \nI managed to make your test program crash.\n\nPID: 901  \nThread: 0\n\nException: EXC\\_BAD\\_ACCESS (0x0001)  \nCodes: KERN\\_INVALID\\_ADDRESS (0x0001) at 0xc0000000\n\nShould I send you the full report?\n\n"
    },
    {
      "time": "8 May 2007 — 12:35pm",
      "content": "\\> The Bezier version is a 1px red stroke, and the spiral version is on top in black.\n\nOh.  \nWell goldangit then that's plenty close enough!\n\nIt's nice to see that such a close approximation  \ndoesn't result in an infestation of vertices.\n\nWhat does the \"optim\" setting do?\n\nConcerning an overlay of the physical French curve and your end-result, we don't really need the former, we just need the original (1-bit) shape you started with. But if you think the threshold for that is as tight as the first overlay, don't bother.\n\n\\> Cornu didn’t invent the spiral bearing his name, Euler did\n\nWell, and apparently Pierre didn't invent beziers, Paul de Casteljau did, but these things can stick and trying to unstick them distracts from true work! On the other hand Euler was da man (as Laplace\\* found out the hard way) and it's early days so maybe we can do something.\n\n\\* Or was it somebody else? I'm vaguely it might have been an Englishman instead. Whoever it was invented some polynomial math, and then found out it was merely a special case of something Euler had done long before!\n\n\\> I’d be very interested to learn how long it takes you, Hrant\n\nYeah, me too. Windows version please!\n\nYour broader challenge sounds fun and relevant.  \nBut no need to bother with formal timekeeping - we can trust us.\n\nhhp\n\n"
    },
    {
      "time": "8 May 2007 — 1:02pm",
      "content": "_What does the “optim” setting do?_\n\nIt's a speed/optimization tradeoff. At zero, it's interactively fast but generates about three times as many Beziers as is needed. At three, it (currently) takes about a minute, but generates something like the absolute most optimized cubic Bezier representation possible for the curve. The main thing it's doing at level 3 is exhaustively searching all points along the curve to find the best points to break - at the lower levels, it just splits the curve in half whenever a single Bezier is not sufficient. There'll be more detail in my thesis, of course.\n\n_But no need to bother with formal timekeeping - we can trust us._\n\nI think we can too, but I'd like to remove as many variables that could spoil the results as I can.\n\n"
    },
    {
      "time": "8 May 2007 — 2:28pm",
      "content": "Not trying to compare to his at all William (his S sure is a very nice S), it'll probably take a million years till a get the letter s to look like I want it to... It may not look perfect, but it certain took 1/millionth of the time to get done. If the tool is useful only to know that I suck at drawing \"s\" in less time, it's fair enough for me.\n\n"
    },
    {
      "time": "8 May 2007 — 2:34pm",
      "content": "I'm surprised the conversion is so computationally intensive.  \nMust be a good sign. :-)\n\nhhp\n\n"
    },
    {
      "time": "8 May 2007 — 4:27pm",
      "content": "raph,\n\nMay I ask how you converted to beziers?\n\nI am unable to export my doodlings in any way, and the save option doesn't appear to do anything.\n\nI do find spiro a much quicker and intuitive way of drawing. I have used the bezier tool for many years and feel that I am quite proficient, but this is so quick. It seems more natural.\n\nThanks,\n\nG\n\n"
    },
    {
      "time": "8 May 2007 — 4:46pm",
      "content": "This looks like some amazing stuff. I'm surprised more type designers haven't chimed in on this conversation. Where are you all?\n\n"
    },
    {
      "time": "8 May 2007 — 4:58pm",
      "content": "@Graham\\_Taylor: _May I ask how you converted to beziers?_\n\nThis part of the code is very rough and unfinished. When you press Apple-S, it saves the file \"plate\" into the file system, into the current directory, not sure exactly where that is by default on a mac. (a quick test reveals that it seems to go into / , which is not friendly behavior). Similarly, when you press Apple-P, it saves a PostScript file to /tmp/foo.ps. I then use some command-line scripts (mostly written in Python) to optimize the Beziers, etc. These scripts ship in the spiro tarball, but not in the ppedit.dmg disk image.\n\nDave Crossland (abattis) is planning on writing better documentation soon, which I think will be very helpful.\n\n@biddy: thanks!\n\n"
    },
    {
      "time": "8 May 2007 — 5:21pm",
      "content": "Didn't have time until now to test it. I learned to digitize type with Ikarus, so it's not completely unfamiliar. It seems to be flexible enough to allow the fine tuning I want, but right now, I'm so acclimated to beziers that I'd need more time to get used to the different behavior. I couldn't necessarily compare my drawing speed between Beziers and spirals because most of my actual design work is spent adjusting existing outlines. I don't do a lot of revivals, and I don't do big finished drawings anymore, so the speed at which I can digitize an outline isn't a big factor. Major editing happens after the first round of proofs. I can already slap an outline together in bezier format in record time. It's not finished no matter how much I fuss over it initially.\n\nRaph, I don't want to rain on your challenge, but this means I can't gauge quality or speed based on immediate digitization results; it's very iterative, and \"accuracy\" isn't my concern, rightness of design is, which is revealed with testing and use.\n\n"
    },
    {
      "time": "8 May 2007 — 6:10pm",
      "content": "crossgrove: You make a very good point. Making good, quick digitizations isn't the only way to evaluate curve-drawing techniques.\n\nMy subjective experience is that Spiro is extremely good for making fine edits. You can tweak points around without having to worry about technical details like extremal points, and, in general, the changes \"make sense\". I've done quite a bit of this with both my revivals and my original designs (Inconsolata and Cecco). The warm, fuzzy feeling that I get when drawing has done a lot to motivate me to go more deeply into the math behind the curves, so that I know at multiple levels that the curves are \"right.\"\n\nAt some point, you go beyond what can be quantified, and into the realm of what it _feels_ like to use the tool. I'm hoping that enough people spend enough time playing with it that I can start to get more insight into that, in addition to my own personal experience.\n\n"
    },
    {
      "time": "8 May 2007 — 6:21pm",
      "content": "\\> You can tweak points around without having to  \n\\> worry about technical details like extremal points\n\nThis I don't get. You don't <cite>have</cite> to worry about extrema when you're doing bezier drawing either - you can add those in later, which furthermore is something you'd have to do with/after spiral-to-bezier conversion anyway.\n\n\\> into the realm of what it feels like to use the tool.\n\nYyyup.\n\nhhp\n\n"
    }
  ]
}
