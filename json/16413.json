{
  "id": "16413",
  "title": "FontLab: class based kerning for a ZERO value",
  "forum": "Build",
  "tags": [
    "Build"
  ],
  "content": "Not sure if I'm missing something here, but class based kerning isn't applying any change when I change the kern value to '0' (zero, nada, null, zilch, zippo). I can change it to any other value (positive or negative integers), and the class obeys.\n\nIs this a bug or is there a trick to this?\n\n",
  "author": "silas",
  "time": "23 Nov 2005 — 5:30pm",
  "uid": "7929",
  "comments": [
    {
      "time": "23 Nov 2005 — 6:12pm",
      "content": "Um... Zero equals no kerning. But I must be misunderstanding your post.\n\nWhat I can tell you is this: the order in which your kerning is listed is super duper important, and I hope that someone with The Answer on this issue - Adam? John? Mark? Tom? - can post a fantastic and concise statement.\n\nBecause there are several ways to skin a kerning class cat, but only several. There are also a jillion ways which will fu\\*k everything up.\n\n"
    },
    {
      "time": "23 Nov 2005 — 6:35pm",
      "content": "That's exactly the issue at hand. I had some of the wrong glyphs assigned to a certain class. They were kerned accordingly, and I wanted to essentially delete the kern pairs for those erroneously classed glyphs. I wanted to set them all back to zero with the convenience of their own class.\n\nbtw... Happy Thanksgiving Eve.\n\n"
    },
    {
      "time": "23 Nov 2005 — 9:48pm",
      "content": "Silas,\n\nIf you want to make a zero-valued exception to a nonzero-valued class kerning pair, then I'd make the exception -1 (or something that you don't use in your kerning table), then generate the \"kern\" feature using Kerning Assistance, copy-paste the contents of the \"kern\" feature from the OpenType panel to a text editor and search/replace -1 with 0.\n\nNot the most elegant solution but should work if you \\*really\\* want to do it that way :)\n\nBest,  \nAdam\n\n"
    },
    {
      "time": "25 Nov 2005 — 9:19am",
      "content": "Thanks Adam.\n\nIs this something that could be fixed in a future version? Should I submit a Problem Report at fontlab.com?\n\n"
    },
    {
      "time": "25 Nov 2005 — 10:07am",
      "content": "Aha! Now I see what you're saying: You've got some kerning which you DON'T want, and you're trying to reset those pairs to zero. You can't do that. And it's definitely not a FontLab bug.\n\nKerning is cumulative, so if you have one line of your kern feature which kerns a pair -50, and you have another line which kerns the same pair -25, the result will be a kern of -75.\n\nIf you have one line of your kern feature which kerns a pair -50, and you have another line which kerns the same pair 0, the result will be a kern of -50.\n\nIf you have one line of your kern feature which kerns a pair -50, and you have another line which kerns the same pair 50, the result will be a kern of 0.\n\nWhat you need to do is: figure out where your problem lies and fix it at root. Having two competing kerns is bad coding.\n\n"
    },
    {
      "time": "25 Nov 2005 — 6:16pm",
      "content": "chester: FontLab spits an alert to the Output Panel if you try to compile kern feature data containing duplicate/similar lines (identical or differing values).\n\nAdam: I admit that I didn't actually follow your advice, and now I realize what you were suggesting. It's not that I wanted to make an \"exception\" to the class. If I wanted to do that, I'd simply scratch the glyph(s) from the class. That's what I did, before I manually reset the offending kern pairs to zilch.\n\nThe issue is whether FontLab should simply apply a zero value to the rest of the pairs in a kern class -- nevermind the raw kern feature data. Any change in value is applied for any other integer. Seems like a simple enough action to allow a zero-value to be applied as well. Heck, Fontographer does it.\n\n"
    },
    {
      "time": "25 Nov 2005 — 7:57pm",
      "content": "Silas, indeed FontLab tells you about all kinds of things. If you compile a kern of uppercase \"L\"s (including those with accents) and uppercase \"T's, (including those with accents), you get a message that some kern pairs may never be accessed. FontLab is just being dilligent. (Or a nanny.)\n\nWhich FontLab are you working with? In my experience FL Studio 5 is much better about reporting stuff than FL45 is. And it doesn't necessarily stand up and point out double kerning if you have some glyphs in more than one class.\n\nBut... There is no need for \"zero value\" kerning. It's like having an instruction to \"do nothing\". It's a waste of time and energy to read something which doesn't have any instructions attached.\n\n"
    },
    {
      "time": "25 Nov 2005 — 8:54pm",
      "content": "There actually is a need for zero-value class kerning... to save time in making changes to the kern feature data. The whole purpose of class based kerning is to save HUMAN time and energy. It's not such a drain for a computer to read zero-data if that's what the user has intended.\n\nIn my situation, it was not an instruction to \"do nothing.\" It was an instruction to change the existing kern feature data from the existing, erroneous values to zero for the glyphs in whatever class I chose to handle them by.\n\nAs I said, Fontographer can do it. You set the kern value of one pair in a kerning assistance group and the linked pairs follow suit... even for a zero value. It's good for curing those \"jillion ways\" you mentioned.\n\nAdam... you still there?\n\n"
    },
    {
      "time": "26 Nov 2005 — 8:24am",
      "content": "Class-based kerning and \"Kerning Assistance\" in FontLab does not work the same as Kerning Assistance in Fontographer. It would be nice for those of us who learned to use it in FOG, but it simply doesn't.\n\nClass-based kerning in FL has a dual purpose:\n\nOne is for the Kerning Assistance feature, which is sort of like KA in FOG, but more limited. It is for when you are building a kerning table (NOT the \"kern\" OT feature) for a Type 1 or TrueType font.\n\nThe other is for building the \"kern\" feature in OpenType fonts.\n\nIn either case, it is only the primary glyph (the one with the apostrophe after it) in the class that matters. This is the only glyph you should be kerning. Other glyphs in a class should be left unkerned. (If you do kern them, you will get those \"may never be accessed\" messages.)\n\nIf you are building a conventional kern table, you set up your classes, kern the primary glyphs, and then hit the Expand Kerning button in the Kerning Assistance dialog. This builds the kerning table including all the other pairs implied by your classes.\n\nIf you are building the kern feature for an OT font, you set up your classes, kern the primary glyphs, and then hit the Apply and Save button in the Kerning Assistance dialog. This builds the kern feature. It does not build any new kerning pairs.\n\nAll of this assumes you're using FL 4.6. As I understand it, this stuff is a bit less confusing in FontLab Studio 5, but I'm still waiting for the Mac version.\n\nThe Kerning Assistance facility in FOG was much more flexible and powerful, but would not be much use for building a kern feature. It had no concept of a \"primary glyph\" which is the basis for class-based kerning.\n\n"
    },
    {
      "time": "26 Nov 2005 — 10:10am",
      "content": "This is not about the zeros ...\n\nMark Simonson wrote:  \n\"The Kerning Assistance facility in FOG was much more flexible and powerful, but would not be much use for building a kern feature.\"\n\nBoth follow a different logic. Fontographer's kerning assistance is as it is because it does \\*not\\* have to result in class based kerning.\n\n\"... It had no concept of a “primary glyph” which is the basis for class-based kerning.\"\n\nThe primary glyph is FontLab's approach to class based kerning. But the OT kern feature only needs the definition of classes, the kerning of classes against others, and the kerning of individual glyphs against others which are the exceptions. One could consider other approaches to class-based kerning in FontLab which would not require primary glyphs.\n\n\"In either case, it is only the primary glyph (the one with the apostrophe after it) in the class that matters. This is the only glyph you should be kerning. Other glyphs in a class should be left unkerned. (If you do kern them, you will get those “may never be accessed” messages.)\"\n\nWell, kerning other (not primary) glyphs will create the exceptions which are not class based.\n\nThe \"may never be accessed\" messages indicate that one glyph is part of more than one kerning class which is strictly forbidden. Unfortunately, this happen all the time.  \nTo avoid this, just create separate sets of kerning classes for first-glyphs-in-kerning-pairs and for second-glyphs-in-kerning-pairs. (In the Kerning Assistance then, for first-glyphs-in-kerning-pairs classes, only mark classes serving as exactly that; and for second-glyphs-in-kerning-pairs classes, only mark these.) But still, you need to take care that e.g. an \"a\" may exist only once among the first-glyphs classes, and only once among the second-glyphs classes.  \nNormally, this works fine.\n\nFontLab's kerning assistance may differ from Fontographer's. But it makes perfect sense considering the desired output, the kern feature. (Only the idea of using a primary glyph I consider as unhappy as this imposes unnecessary constraints.)\n\n"
    },
    {
      "time": "26 Nov 2005 — 10:16am",
      "content": "Mark: I understand the way the class tables interact with the kern feature data. I'm suggesting that they also communicate zero values. Regardless of the primary glyph organization, it would be nice to be able to 'undo' or 'reset' or 'delete' the kern value for an entire class. Setting the kern value for the primary glyph seems like the most logical way.\n\n"
    },
    {
      "time": "26 Nov 2005 — 10:23am",
      "content": "pardon... Setting the kern value for the primary glyph _to zero_ seems like the most logical way.\n\n"
    },
    {
      "time": "26 Nov 2005 — 10:51am",
      "content": "I'm not sure if I follow.\n\nClass kerning in FontLab is made by linking one or two classes to an individual pair. The individual pair is always defined between two glyphs. One or both glyphs can be key glyphs in a class.\n\nLet's say we have the kerning pairs:  \n/a/c -20  \n/a/e -30  \n/c/e 10\n\nAnd we have three classes:  \n\\_a: a' aacute agrave adieresis  \n\\_c: c' ccedilla  \n\\_e: e' eacute egrave\n\nEach class has one key glyph marked with the single quote and one or more dependent glyphs.\n\nBoth in FontLab 4.6 and FontLab Studio 5, you only kern the key glyphs so you always have individual kerning pairs for just the key glyphs when working in class kerning. The problem in FontLab 4.6 is that you cannot SEE the kerning for the dependent glyphs in the Metrics Window.\n\nSo if you preview the \"/a/c\" pair in FontLab 4.6's Metrics Window, you'll see the kerning applied but if you look at the \"/a/ccedilla\" pair, it will look as if it were unkerned.\n\nTo see the kerning applied, you need to build the \"kern\" feature (Tools / Kerning Assistance / Apply and Save), then \"Compile\" the OpenType features in the OpenType panel and finally preview the kerning in the OpenType Features panel.\n\nAlternatively, you can expand the kerning, i.e. physically copy over the kerning values from the key glyphs to the dependent glyphs. Then you'll see the kerning in the Metrics Window but it's no longer class kerning. Each pair is now an individual pair that happens to have the same value. If you change the kerning value for \"/a/c\", the kerning value for \"/a/ccedilla\" will remain the same. You can still \"expand\" the kerning again which will again copy over the \"master\" kerning value from the \"/a/c\" pair to the dependent glyphs, thus overwriting the previously expanded indivdual pairs.\n\nIn FontLab Studio 5, it has been changed. You see the class kerning pairs live in the Metrics Window. By default, dependent glyphs are displayed in dark blue and key glyphs in black. If you watch \"/a/c /a/ccedilla\" in the Metrics Window and change the kerning value of \"/a/c\", the \\*virtual\\* kerning value of \"/a/ccedilla\" will update instantly. But you need to remember that there still is just ONE physical kerning pair here: \"/a/c\".\n\nOf course, you can define a kerning exception for /a/ccedilla\", thus replacing the virtual kerning pair by a real kerning pair. This is what expanding the kerning does for all the pairs, or you can do it for a specific pair. If you switch FontLab Studio 5 to \"Class kerning with exceptions\" and drag around the \"/a/ccedilla\" pair, a new physical kerning pair will be defined. It can have the same or a different value from the \"/a/c\" pair, but once it's there, the link between the physical \"/a/c\" pair and the virtual \"/a/ccedilla\" pair is no longer there because there are two separate physical pairs now: \"/a/c\" and \"/a/ccedilla\".\n\nNow, what happens if you set a kerning value to 0 in FontLab 4.6 or FontLab Studio 5? Such kerning pair is automatically deleted. This means that if I had two pairs: \"/a/c -30\" and \"/a/ccedilla -30\" and set \"/a/c\" to 0, I end up with just only one pair: \"/a/ccedilla -30\". If I do Kerning Assistance now (no matter whether it's in 4.6 or 5.0), the \"/a/ccedilla -30\" will never automatically vanish because \"its master has been killed\". The \"/a/ccedilla\" pair is a ronin now, a masterless warrior. The \"/a/c\" pair does no longer exist so there is nobody to tell the \"/a/ccedilla\" pair to go bananas as well.\n\nThe handling of kerning in FontLab Studio 5 has been much improved but you still need to think about the actual kerning pairs that \"carry the burden\". Each class kerning value is still attached to one particular key glyph combination.\n\nIn FLS5, there are three kerning modes: \"Class kerning\", \"Class kerning with exceptions\" and \"Class kerning in key pairs only\".\n\nWhen \"Class kerning in key pairs only\" is switched on, you can only change the kerning values for the key glyph and the dependant glyphs are locked from being changed. So if you have the situation as detailed above (3 kerning pairs, 3 classes), you could define or change a kerning pair for \"/a/c\" but not for \"/a/ccedilla\". This mode is pretty safe to work with because you always know which glyphs you can kern.\n\nWhen \"Class kerning with exceptions\" is activated, then kerning key pairs defines key kerning pairs (which are reflected in the virtual kerning pairs for the dependent glyphs) but if you kern a dependent pair, an exception is created, i.e. a new physical pair. When I kern \"/a/c\", I get one physical pair \"/a/c\" and automatically a number of identical virtual pairs for \"/aacute/c\", \"/agrave/c\", \"/a/ccedilla\" etc. But if I explicitly kern \"/a/ccedilla\", then a new physical pair is created and that pair disassociates itself from the key pair. The other virtual pairs remain linked.\n\nThe third class kerning mode \"Class kerning\", which is on by default, works like this: if you have classes define as in our example, the key kerning pair is defined or modified no matter whether you kern key glyphs or dependant glyphs. This is important to realize and remember: in this mode, when I kern \"/a/c\" or when I kern \"/a/ccedilla\" or when I kern \"/aacute/c\", \\*always\\* the physical \"/a/c\" pair actually gets kerned (and the virtual pairs follow). So the concept of key glyphs is still there but you can SORT OF forget about it. You can use a \"live language\" text file and kern around your glyph combinations, and FontLab Studio 5 will make sure that always the key pairs get the values.\n\nSo if you have kerning classes defined like this (theoretically):  \n\\_flatflat: n' m h u ntilde uacute ugrave  \n\\_flatround: p' b  \n\\_roundround: o' oacute ograve  \n\\_roundflat: c' d e q ccedilla eacute\n\nAnd you type in \"/b/e\" in the metrics window and assign the kerning value -20 to that pair, what you're actually doing is you're assigning the kerning value -20 to the physical \"/p/c\" pair. There is no physical \"/b/e\" pair at that moment -- it's only virtual.\n\nAgain, you can make it physical by defining an exception (for that switch to the \"Class kerning with exceptions\" mode) or by expanding the kerning (in Kerning Assistance). If you have expanded your kerning, you'll have many pairs:  \n/p/c -20  \n/p/e -20  \n/b/c -20  \n/b/e -20  \n/b/q -20  \netc.\n\nLet's assume that for /b/q you now define a different value, -30.\n\nNow, FontLab Studio 5 has the mechanism of compressing kerning, which will do the opposite: it will remove those physical kerning pairs that can be replaced by virtual pairs. After compressing, only  \n/p/c -20  \n/b/q -30  \nremain.\n\n/p/e, /b/c, /b/e will all be removed as physical pairs and replaced by virtual pairs. The class definition again links them to the /p/c pair. Compressing will not remove /b/q because it has a different value so it remains as an exception.\n\nBut what happens if I have the situation:  \n/p/c -20  \n/p/e -20  \n/b/c -20  \n/b/e -20  \n/b/q -20  \nand then set /p/c to 0?\n\nThe physical pair /p/c will be removed. If I now compress the kerning, all these pairs will remain as physical pairs:  \n/p/e -20  \n/b/c -20  \n/b/e -20  \n/b/q -20\n\nWhy? Because -- as I explained earlier -- they're ronins now. Their master (the /p/c pair) has been deleted from the kerning table (by setting it to 0) and therefore they don't have a way to return to being a virtual pair.\n\nIn other words, if you expand, virtual pairs turn into physical pairs. If you compress, physical pairs turn into virtual pairs but only then if they have a potential key physical pair that they can be linked to. Setting a physical pair to 0 removes that pair from the pairs list so the ability to \"compress\" the others is lost. Of course, you can rewrite your class definition by moving the \"'\" marker to some other glyph. If you set /p/c to 0, you could change:  \n\\_flatround: p' b  \nto  \n\\_flatround: p b'\n\nFrom now on, the /b/c pair is the master, not the /p/c. The ronins have a master again and could be compressed again.\n\nBut note that if you change your key glyph within your class, then the virtual pairs will not retain the old kerning values. Consider:  \nClass  \n\\_H: H' N M I  \nPhysical pair  \n/H/O 20  \nVirtual pairs  \n/N/O 20  \n/M/O 20  \n/I/O 20\n\nWhen I go ahead and change the class definition to:  \n\\_H: H N' M I  \nI'll have:  \nPhysical pair  \n/H/O 20\n\nThis means that the virtual pairs did not \"magically\" migrate to the new master.\n\nHowever, if I'd like that to happen, I could expand kerning, reassign the key glyph and then compress kerning.\n\nSo, after expanding the kerning, I'd have:\n\nClass  \n\\_H: H' N M I  \nPhysical pairs  \n/H/O 20  \n/N/O 20  \n/M/O 20  \n/I/O 20\n\nThen I change the class definition so I have a new key glyph  \nClass  \n\\_H: H N' M I  \nPhysical pairs  \n/H/O 20  \n/N/O 20  \n/M/O 20  \n/I/O 20\n\nand finally I compress kerning to get:  \nClass  \n\\_H: H N' M I  \nPhysical pair  \n/N/O 20  \nVirtual pairs  \n/H/O 20  \n/M/O 20  \n/I/O 20\n\nI hope this very long posting has made the whole situation a bit more clear :)\n\nRegards,  \nAdam Twardoch  \nFontlab Ltd.\n\n"
    },
    {
      "time": "26 Nov 2005 — 11:02am",
      "content": "_Both follow a different logic. Fontographer’s kerning assistance is as it is because it does \\*not\\* have to result in class based kerning._\n\n...\n\nWell, kerning other (not primary) glyphs will create the exceptions which are not class based.\n\nYes, I realize that. I guess I mean for _practical_ purposes. In my experience, exceptions in the kern feature which are not class based cause problems in some applications, specifically, the kerning is not recognized. (I seem to recall that this is because of some limitation in the Adobe FDK, upon which FL's OT feature compiling language is base.)\n\nThe upshot is that you have to make sure there are no non-class based kerning pairs in the kern feature. The only way I know of to do this is to only kern the primary glyphs.\n\n"
    },
    {
      "time": "26 Nov 2005 — 12:32pm",
      "content": "Mark,\n\nno no, you can mix classes and individual glyphs. A typical kern feature of an OpenType font looks like:  \nfeature kern { # Kerning  \n # Latin  \nlookup kern1 {  \n pos T w -22;  \n pos T @\\_a -30;  \n pos @\\_Y w -25;  \n pos @\\_Y @\\_a -31;  \n} kern1;  \n} kern;\n\nSo there are single-to-single, single-to-class, class-to-single and class-to-class pairs. Exceptions are always placed before the rules.\n\nFontLab 4.6 builds the kern feature in a way that is not always compatible with ATM 4.1/4.6. FontLab Studio 5 is better there.\n\nRegards,  \nAdam\n\n"
    },
    {
      "time": "26 Nov 2005 — 1:07pm",
      "content": "Adam,\n\nThen why does InDesign not see any kerning in a font when I include anything but classes in the kern feature?\n\nMaybe I'm doing something wrong, but that's the only way I've been able to get kerning to work with my OpenType fonts.\n\n"
    },
    {
      "time": "26 Nov 2005 — 9:08pm",
      "content": "Adam,  \nfrom your post I take it that the order of kerns using classes and glyphs is:  \nglyph glyph  \nglyph class  \nclass glyph  \nclass class\n\nI have noticed that kern features with things in the wrong order don't work.\n\nI now build my kern feature by first making classes for each letter with its accents:\n\n@\\_kernA1 = [A Aacute Agrave Acircumflex Adieresis Atilde Aring Acaron Amacron Abreve Ainvertedbreve Adoublegrave Adotabove Aringacute Adieresismacron Aogonek Anocross];  \n@\\_kernAE1 = [AE AEacute AEmacron];  \n@\\_kernB1 = [B];  \n@\\_kernC1 = [C Cacute Ccircumflex Ccaron Cdotaccent Ccedilla];  \netc.\n\nThen in the kern feature:  \n pos @\\_kernA1 @\\_kernC1 -20;  \n pos @\\_kernA1 @\\_kernG1 -20;  \n pos @\\_kernA1 @\\_kernT1 -95;  \n pos @\\_kernA1 @\\_kernV1 -90;  \netc.\n\nThis results in the majuscule A and all of the majuscule A with accents kerning -95 with majuscule T and all of the majuscule T with accents. And on and on and on. Until the crack o' crack o' dawn.\n\nI get to recycle big chunks of my OT coding, and I don't go anywhere near the Collections & Classes panel.\n\nI'm curious to know how everybody else does it?\n\nc\n\n"
    },
    {
      "time": "26 Nov 2005 — 10:02pm",
      "content": "Thanks again for the wisdom, Adam, but I think I can clarify my proposition a tad bit more...\n\nMy issue is with expanding the kerning. Zero values are ignored in this process, but I'd like for any zero-values set on the primary glyph in a class to be applied to the rest of the class. To use your poetics: I wanted to apply a zero-value to the rest of those would-be \"ronins.\"\n\nI'd just like to have some way of selectively deleting kern pairs (in the all too common scenario that they are botched with a class-based guffaw.)\n\nRoger that?\n\n"
    },
    {
      "time": "27 Nov 2005 — 12:07am",
      "content": "Chester,\n\nThis has to do with the basics of OpenType processing. Once a given glyph combination is hit, the OpenType machinery stops looking for it and moves on to the next pair. So if you have the \"T agrave\" glyph-glyph combo intended as an exception to the \"T a\" class-class combo, it had better come first.\n\nIn some senses, it's exactly the same reason you put \"ffi\" ahead of \"ff\" in the 'liga' feature.\n\nRegards,\n\nT\n\n"
    },
    {
      "time": "27 Nov 2005 — 8:56am",
      "content": "\\> My issue is with expanding the kerning.  \n\\> Zero values are ignored in this process\n\nI thought I explained this already: there is no such thing as zero-values kerning pairs. If you set the value of a kerning pair to zero, the kerning pair is removed. It really becomes \"nada\".\n\nBut I still don't understand your issue. Is your scenario the following:\n\n1. You define 2 classes:\n\n\\_A: A' Aacute Adieresis  \n\\_Y: Y' Yacute Ydieresis\n\n2. You define 2 pairs:\n\n/A/Y -30  \n/A/V -30\n\n3. You expand your kerning. You get:\n\n/A/Y -30  \n/Aacute/Y -30  \n/Adieresis/Y -30  \n/A/Yacute -30  \n/Aacute/Yacute -30  \n/Adieresis/Yacute -30  \n/A/Ydieresis -30  \n/Aacute/Ydieresis -30  \n/Adieresis/Ydieresis -30  \n/A/V -30  \n/Aacute/V -30  \n/Adieresis/V -30\n\n4. You delete the pair /A/Y (you set its value to 0).\n\nNow you have 11 pairs:\n\n/Aacute/Y -30  \n/Adieresis/Y -30  \n/A/Yacute -30  \n/Aacute/Yacute -30  \n/Adieresis/Yacute -30  \n/A/Ydieresis -30  \n/Aacute/Ydieresis -30  \n/Adieresis/Ydieresis -30  \n/A/V -30  \n/Aacute/V -30  \n/Adieresis/V -30\n\nIs this the scenario you're following?\n\nSince the pair /A/Y is gone, FontLab has no information about it anymore. Therefore, it has no knowledge as for how to eliminate the other pairs. You cannot copy \"nada\" to something else. Because nada isn't.\n\nA quote from Tom Stoppard should illustrate the problem:\n\nRosencrantz: Do you think Death could possibly be a boat?  \nGuildenstern: No, no, no... Death is not. Death isn't. Take my meaning? Death is the ultimate negative. Not-being. You can't not be on a boat.  \nRosencrantz: I've frequently not been on boats.  \nGuildenstern: No, no... What you've been is not on boats.\n\nI realize that since FontLab 4.6 lacks the immediate visualization of dependent (virtual) kerning pairs, you need to expand kerning in order to see it in the metrics window. In FontLab Studio 5, you won't need to expand kerning at all except at the very end of the font development when creating a PostScript Type 1 font. During the design stage and when working on OpenType fonts, you won't touch Kerning Assistance at all. You'll define your classes in the Classes panel (you can use the automatic class building feature there) and then you just go ahead and kern in the metrics window -- both real and virtual kerning pairs will be always visualized. Of course, in FontLab Studio 5, if you set the value of a real pair to 0, i.e. delete it, the dependent virtual pairs will immediately follow -- you won't need to do anything.\n\nSo I guess, the ultimate answer for your question is: get FontLab Studio 5 for Windows now or wait until the Mac version is released.\n\nRegards,  \nAdam\n\n"
    },
    {
      "time": "27 Nov 2005 — 9:58pm",
      "content": "<cite>Is this the scenario you’re following?</cite>\n\nYes.\n\n<cite>Since the pair /A/Y is gone, FontLab has no information about it anymore. Therefore, it has no knowledge as for how to eliminate the other pairs.</cite>\n\nThe class is still active. Now, what I'm suggesting is that the class _continue to serve its purpose_, and _by some magical feat of software engineering_ (ie: the Expand Kerning feature) register the fact that the primary pair HAS BEEN DELETED and go about DELETING THE REST OF THE DEPENDENT PAIRS.\n\nThis is, perhaps rightfully so, a philosophical matter, but existentialist cinema does not illustrate the fact that the software is not behaving logically. Software is not poetry. It is machinery and should perform according to the user's expectations. My expectation is for the class to continue to determine the values of the dependent pairs... not to produce \"ronins\" or Rosencrantzes. (Although I do love a dash of absurdism in my theatre.)\n\n<cite>I realize that since FontLab 4.6 lacks the immediate visualization of dependent (virtual) kerning pairs, you need to expand kerning in order to see it in the metrics window.</cite>\n\nok... this is where I observe FontLab's behavior to be deficient...\n\nFrom what you are saying, Adam, FontLab, by inherent design and intention, is wholly unable to propagate the DELETION of primary glyph kerns to the dependent glyphs of a class via the Expand Kerning process because it isn't designed to understand \"nada.\" Remarkable. Our deranged little ronins go running amok.\n\nI'd like to see the Expand Kerning feature _kill the ronins_. Actually, let's call them vampires... like the Lost Boys version. You kill the head vampire and the rest of 'em get dusted (or cease to be half-way vampires). You're Feldman. I'm Haim.\n\nOTF Kern Feature classes WILL reflect the deletion because those would-be ronin vampires were all imaginary anyhow. But this has nothing to do with FL4.6. I need to keep dreaming about Studio 5 for Mac.\n\nAs for my own comically absurdist analogy, which I find slightly more apropos given your sales pitch for a an upgrade that may very well continue \"pining for the fjords\"...\n\n[http://www.mtholyoke.edu/~ebarnes/python/dead-parrot.htm](http://web.archive.org/web/20150124044728/http:/www.mtholyoke.edu/~ebarnes/python/dead-parrot.htm \"http://www.mtholyoke.edu/~ebarnes/python/dead-parrot.htm\")\n\n"
    },
    {
      "time": "28 Nov 2005 — 5:52am",
      "content": "Silas,  \nit seems to me that if you just do your kerning as a kern feature, you can have your cake and eat it.\n\nYou can make you classes and kern feature in the way I described above, including making \"zero kern\" relationships if you so desire. You use the Preview panel to view the results of your work, and you don't have to go near the Collections/Classes panel or Kerning Assistance. Use the Metrics panel to tweak sidebearings only. (In FontLab Studio 5, the compiled kern feature results are reflected in the Metrics panel.)\n\nSo, in code...\n\nBuild a kern feature by first making classes for each letter with its accents:\n\n@\\_kernA1 = [A Aacute Agrave Acircumflex Adieresis Atilde Aring Acaron Amacron Abreve Ainvertedbreve Adoublegrave Adotabove Aringacute Adieresismacron Aogonek Anocross];  \n@\\_kernAE1 = [AE AEacute AEmacron];  \n@\\_kernB1 = [B];  \n@\\_kernC1 = [C Cacute Ccircumflex Ccaron Cdotaccent Ccedilla];  \n...  \n@\\_kernX1 = [X];  \n@\\_kernY1 = [Y Yacute Ygrave Ycircumflex Ydieresis Ytilde Ymacron];  \n@\\_kernZ1 = [Z Zacute Zcaron Zdotaccent Ezh Ezhcaron];\n\n"
    },
    {
      "time": "28 Nov 2005 — 5:59am",
      "content": "Thomas,  \nthanks for the info about logic of ordering in OT features. If it's confusing to an old-ish hack like me, it's probably pretty opaque to a newbie. But I kept my basic HTML and BASIC and LOGO knowledge, which has been greatly beneficial to me.  \nc\n\n"
    },
    {
      "time": "28 Nov 2005 — 8:30am",
      "content": "<cite>You use the Preview panel to view the results of your work,</cite>\n\nchester: My Preview panel doesn't show the kerning... not even the hardcoded primary kerns.\n\n"
    },
    {
      "time": "28 Nov 2005 — 8:31am",
      "content": "...the Opentype Preview panel, that is.\n\n"
    },
    {
      "time": "28 Nov 2005 — 8:42am",
      "content": "You have to build and compile the kern feature, then switch to the OpenType Features tab of the Preview panel and click the checkbox next to the kern feature. Kerning pairs built with the Metrics window will not appear, only pairs defined in the kern feature.\n\n"
    },
    {
      "time": "28 Nov 2005 — 9:29am",
      "content": "Silas, Mark answered your question...\n\nI completely advocate working your kerning as an OT feature, and then generating a kern table at the end of the process, once you're happy with the results. FontLab Studio 5 has a nice new feature where you can generate a 1:1 kern feature from your kern table. It's then only a couple of hours in BBEdit to (manually) convert that to a kern feature like what I posted earlier in this thread.\n\nI may post my code on my site for people to download and play with. It will be the kern feature from an existing font, but should be a good start for folks.\n\nStand by...\n\n"
    },
    {
      "time": "28 Nov 2005 — 10:49am",
      "content": "I think I've discovered another bug.\n\nThe Kern Feature wouldn't compile when it was the only feature defined. Rather, it wouldn't show up in the features list in my OpenType Preview panel. I added a liga feature with a custom sub and THEN they both appeared.\n\nAll is (almost) well. Can anyone else replicate this cute little anomaly? Is this not an anomaly?\n\n"
    },
    {
      "time": "28 Nov 2005 — 10:59am",
      "content": "Silas,\n\n\"I think I’ve discovered another bug. The Kern Feature wouldn’t compile when it was the only feature defined. \"\n\nYes, it's a bug that has been fixed in FontLab Studio 5.\n\n\"software is not behaving logically\"\n\nActually, I think the software is behaving logically. It's just not behaving the way you expect.\n\nAs I explained, in FontLab Studio 5, this problem will no longer be an issue, at least not in the majority of cases, since you won't be expanding the kerning on a regular basis but rather working with real and virtual pairs until very late in the process. Virtual pairs \\*do\\* get deleted when the corresponding real pair gets deleted. It's the virtual-become-real pairs (after expansion) that stick. But since you (practically) don't need to expand in FontLab Studio 5, you won't need to worry about virtual-become-real pairs.\n\nAlso, in FontLab 4.6, you can kill all the vampires/ronins with some 20 lines of Python code. The feature itself is not built into the software but thanks to Python, you can implement the feature yourself.\n\nRegards,  \nAdam\n\n"
    },
    {
      "time": "28 Nov 2005 — 11:00am",
      "content": "Right, I have posted a text file covering class-based OTKerning for download here:  \n [http://vllg.com/files/OTKerning/](http://web.archive.org/web/20150124044728/http:/vllg.com/files/OTKerning/ \"http://vllg.com/files/OTKerning/\")\n\nSilas, Adam, I just tested a font with only the kern feature, and it compiles perfectly. It does have the \"magic bullet\" lines of feature:  \n@\\_notdef = [.notdef];  \nin the class list and:  \npos @\\_notdef @\\_notdef 0;  \nas the first line of the kern feature.\n\nTry throwing those into your file and see what happens.\n\n"
    },
    {
      "time": "28 Nov 2005 — 12:15pm",
      "content": "chester: that .notdef trick isn't doing its trick. I'm losing my marbles.\n\nIt's 60 degrees in Chicago at the end of November. Dipping back down into the 30's tomorrow. I think I'll go for a walk and soak up the last of the fresh air -- maybe come back to this stuff with a clear head.\n\n"
    },
    {
      "time": "28 Nov 2005 — 12:34pm",
      "content": "Chester, thanks for posting that. I'm going to try your method next time. It looks more straightforward than the standard way (i.e., using the Metrics window and the Apply and Save button).\n\nOne thing I might add: When I set up my classes, I divide them into left and right sets. For example, @\\_kernlA is for when the A is on the left side of a kern; @\\_kernrA is for when the A is on the right side. The content of these classes depends on the design of the font, and I always analyze and organize by shape (for each side) before even starting to kern.\n\nIt looks like your class definitions are more generic, but that would make them easier to use with different fonts.\n\n"
    },
    {
      "time": "28 Nov 2005 — 12:51pm",
      "content": "Mark, indeed, I have worked with classes similar to what Adam has described where shapes are addressed, so that you can kern, say, \"V\" and \"all lowercase glyphs with round left sides.\" (I did this on \"Mavis\", but ran into some problems, and found it hard to keep organised with 1000+ glyphs, including alternates, so have resorted to the tried and true method I posted.)\n\nAlso, what I posted only deals with the kerning of letters. There are also classes which keep track of glyphs for subsitution features like smcp and tnum and whatnot.\n\n"
    },
    {
      "time": "28 Nov 2005 — 2:54pm",
      "content": "Thanks Chester!\n\n"
    },
    {
      "time": "29 Nov 2005 — 9:34am",
      "content": "I find myself using the Generate Classes function quite often (in Classes panel). It analyzes the shapes of the characters between the appropriate lines (baseline, x-height, caps height) and combines similar glyphs into classes. Sometimes, it's good to temporarily change your caps height or x-height in Font Info (put them 10 units lower) so subtle differences at the top of the glyphs don't confuse the algorithm.\n\nAdam\n\n"
    },
    {
      "time": "25 Feb 2008 — 7:53am",
      "content": "I am just marking this thread because I am trying to figure a way to clear kerning exceptions to class based kerning both globally and individually. I don't want to set a new exception to zero, I want to delete the exception and have the pair respond to the class kerning and not have a red number in it.\n\nChrisL\n\n"
    }
  ]
}
