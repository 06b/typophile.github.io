{
  "id": "122993",
  "title": "Grouping zeros: OpenType ligature substitutions right to left",
  "forum": "Build",
  "tags": [
    "opentype ligatures substitution",
    "Build"
  ],
  "content": "Is it possible to do ligature substitutions right to left in OpenType?\n\nI'm working on a special monospaced typeface with ligatures, you can check it out [here](http://web.archive.org/web/20150317225738/http:/typophile.com/wiki/https%3A/%252Fgithub.com/i-tu/Hasklig/).\n\nI'm trying to separate zeros in groups of three with a ligature. Examples: 1000000 -\\> 1 000 000, and 10000 -\\> 10 000. The substitution should be done right to left, or otherwise the 10000 becomes 1 000 0, as with the following code:  \n`\nfeature liga {\n    sub zero zero zero by zero_zero_zero;\n}\n`\n\nI'd also appreciate information on how one would use kerning rules in a situation like this, though I'm not sure if they would apply to a monospaced typeface.\n\n",
  "author": "itu",
  "time": "1 Feb 2015 — 4:01am",
  "uid": "213643",
  "comments": [
    {
      "time": "1 Feb 2015 — 7:06am",
      "content": "Working link: [https://github.com/i-tu/Hasklig/](http://web.archive.org/web/20150317225738/https:/github.com/i-tu/Hasklig/ \"https://github.com/i-tu/Hasklig/\")\n\n"
    },
    {
      "time": "1 Feb 2015 — 4:52pm",
      "content": "You can use contextual substitutions to replace a zero, or a digit, with a variant; for instance a digit followed by three digits but not a fourth can be replaced by a digit with a larger right side bearing. Knowing that lookups are applied on the input line one after the other, that gives the impression that the processing is right to left though it is not. Here is some code that I just checked in FontForge and that groups digits in groups of three.\n\n    @dgt = [\\zero \\one \\two \\three \\four \n              \\five \\six \\seven \\eight \\nine] ;\n    @dgtrsp = [\\zero.rsp \\one.rsp \\two.rsp \\three.rsp \n              \\four.rsp \\five.rsp \\six.rsp \n              \\seven.rsp \\eight.rsp \\nine.rsp ] ; \n    \n    lookup addspace1 {\n       ignore sub @dgt' @dgt @dgt @dgt @dgt ; \n       sub @dgt' @dgt @dgt @dgt by @dgtrsp ;\n    } addspace1 ;\n    \n    lookup addspace2 {\n    \tsub @dgt' @dgt @dgt @dgtrsp by @dgtrsp ;\n    } addspace2 ;\n    \n    lookup addspace3 {\n    \tsub @dgt' @dgt @dgt @dgtrsp by @dgtrsp ;\n    } addspace3 ;\n    \n    lookup addspace4 {\n    \tsub @dgt' @dgt @dgt @dgtrsp by @dgtrsp ;\n    } addspace4 ;\n    \n    feature calt {\n       script DFLT;\n         language dflt ;\n    \tlookup addspace1 ;\n    \tlookup addspace2 ;\n    \tlookup addspace3 ;\n    \tlookup addspace4 ;\n       script latn ;\n         language dflt;\n    \tlookup addspace1 ;\n    \tlookup addspace2 ;\n    \tlookup addspace3 ;\n    \tlookup addspace4 ;\n    } calt ;\n\nOf course, if you wanted to group digits after the decimal point, you would consider left contexts and use digits with a large left side bearing instead.\n\nIt was assumed above that the glyph zero.rsp is the glyph zero with a right side bearing increased by some constant value and similarly for other .rsp glyphs. It is also possible to keep all .rsp digits the same width as digits and then to add a kerning equal to that constant value (for you, the character widths) between the .rsp digits and the digits; that has the same visual effect.\n\n"
    }
  ]
}
