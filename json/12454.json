{
  "id": "12454",
  "title": "“Modular” Typefaces",
  "forum": "Design",
  "tags": [
    "Design"
  ],
  "content": "How far has modular typeface design been explored (in the digital sense)? I guess Multiple Master fonts are along those lines, where you can specify weight and width, but has this been pushed further?\n\nIt seems that with digital type, this could be explored with some interesting results. In MM, you started with a basic syle, right. But could you start with a totally blank slate and build a typeface based on given parameters? Beyond weight and width you could specify presence of serifs or not, type of serifs, bracketing, stroke axis, stylistic elements (humanistic, neoclassical, geometric).\n\nElements on a particular glyph could be specified, and then related elements on other letters would reflect the change. I'm sure some kind of optical engine could be written to even out weight and color of the type.\n\nI guess this would start to move into typeface design by a computer, which is a bit of heresy. But the implications could be interesting.\n\nIf there is something out there I'd like to learn more.\n\nand if there isn't, maybe we could do it\n\n",
  "author": "ericgio",
  "time": "15 May 2005 — 9:53pm",
  "uid": "3814",
  "comments": [
    {
      "time": "16 May 2005 — 12:12am",
      "content": "You should check out Metafont and Metafog, two technologies that explore some of the possibilities of generative type design (they're pretty technology-driven, though, being more or less programming languages that generate high-resolution bitmap fonts). There's also FontStudio / FontChameleon, although those are long-dead by now. Practically speaking, nobody's really figured out an effective way to manage the complexity of algorithmically modifying fonts on the fly, at least not in any particularly freeform way. [Luc Devroye's font software page](http://web.archive.org/web/20130821092236/http:/www-cgrl.cs.mcgill.ca/~luc/fontsoftware.html) has lots of links worth exploring.\n\n"
    },
    {
      "time": "16 May 2005 — 5:35am",
      "content": "The real tool for this is [Letterror](http://web.archive.org/web/20130821092236/http:/typophile.com/wiki/Letterror)'s [Superpolator](http://web.archive.org/web/20130821092236/http:/typophile.com/wiki/Superpolator). You can have an infinite amount of axis there, even axis for just one glyph in a font. Anything could be given an axis, including everything you mentioned in your post.\n\nThe \"designer\" would have to generate the instances into a font though before it could be used in an application.\n\nSuperpolator requires a super dose of [Python](http://web.archive.org/web/20130821092236/http:/typophile.com/wiki/Python) knowledge. But if you want to do anything with type & programming, Python is the language to learn. I'm surprised that Luc Devroye hasn't realized this yet.\n\nAs far as I know, Meta[insert second word here] is so, so dead. Or, if it was ever alive, it was never really intertwined with the type or graphic design communities, [Hermann Zapf](http://web.archive.org/web/20130821092236/http:/typophile.com/wiki/Hermann%20Zapf) being a notable exception.\n\nI wish that I knew Python. Someday, I will try to start with it.\n\n\\_\\_  \n [www.typeoff.de](http://web.archive.org/web/20130821092236/http:/www.typeoff.de/ \"www.typeoff.de\")\n\n"
    },
    {
      "time": "17 May 2005 — 9:49pm",
      "content": "superpolator looks pretty interesting. however it seems to interpolate the glyphs from existing glyphs to create new ones. Am I misunderstanding how it works? I'm thinking of an interface that would start from zero, with no existing typefaces whatsoever.\n\nessentially it would be a multiple master with no masters. just multiples ; )\n\ngranted, this would require extensive collaboration between a very talented coder and a very talented type designer to establish the parameters and devise a way to make it work.\n\nI don't know if somethin glike that could be used as a tool to design a finished face. it would have to be pretty sophisticated. it could maybe be used as a a quick way to start typefaces, like making a “blank” within certain parameters, getting some rough issues down. then the designer could go in and do the fine tuning. It doesn't seem like a lot of the parameters would be all that hard to specify, though.\n\ndan, why is python the language to learn for type?\n\n"
    },
    {
      "time": "19 May 2005 — 6:07am",
      "content": "_why is python the language to learn for type?_\n\nBecause all serious font programming to date has been done with Python, and it is the language that FontLab and all other professional apps support (or will support).  \n\\_\\_  \n [www.typeoff.de](http://web.archive.org/web/20130821092236/http:/www.typeoff.de/ \"www.typeoff.de\")\n\n"
    },
    {
      "time": "19 May 2005 — 11:27pm",
      "content": "The other answer is that Just van Rossum, principal of [LettError](http://web.archive.org/web/20130821092236/http:/typophile.com/wiki/LettError), programmer of [RoboFog](http://web.archive.org/web/20130821092236/http:/typophile.com/wiki/RoboFog) and [RoboFab](http://web.archive.org/web/20130821092236/http:/typophile.com/wiki/RoboFab), and general wizard font hacker, is the brother of Guido van Rossum, the designer and lead developer of Python.\n\nHackers call this a \" [hysterical raisin](http://web.archive.org/web/20130821092236/http:/www.jargon.net/jargonfile/h/hystericalreasons.html)\". Python is no better, nor no worse, for doing font hacking than any of the other x billion object-oriented functional scripting languages, like Ruby or Perl.\n\n"
    },
    {
      "time": "20 May 2005 — 1:58am",
      "content": "The [MIT Media Lab](http://web.archive.org/web/20130821092236/http:/www.media.mit.edu/) would be a perfect candidate for exploring some of the things mentioned above in the thread.\n\nnow, how to get them to work on my idea??\n\n"
    },
    {
      "time": "20 May 2005 — 11:52am",
      "content": "...and how do I get Wolfgang Puck to cook me lunch? ;)\n\n"
    }
  ]
}
