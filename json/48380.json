{
  "id": "48380",
  "title": "Advice/opinion needed about the SubLCD Font Rendering Method",
  "forum": "General Discussions",
  "tags": [
    "General Discussions"
  ],
  "content": "Hello,\n\nI have posted previously a thread about my amateur attempts to make screen font display more crisp on LCD screens, while still preserving font shape. I would like to get some expert advice/opinion about the potential of the method described bellow to display screen fonts.\n\nIn my previous post (Help with font Rendering), Twardoch suggested the use of the \"Antigrain geometry\" library and Hrant reccomended Mana pixel font (which indeed looks as crisp as possible and very attractive). Thank you both.\n\nHowever, my goal is to have a method applicable to any font. I was aware of the Antigrain site, but since I am a beginner I chose a much simpler approach based on the algorithm invented by Kim Oyhus: SubLCD ( [http://www.oyhus.no/SubLCD.html](http://web.archive.org/web/20130817215657/http:/www.oyhus.no/SubLCD.html \"http://www.oyhus.no/SubLCD.html\")). SubLCD is claimed to allow a 2x compression on the horizontal axis essentially without loss of information.\n\nThe obvious thing to do was to generate output text/fonts (as bitmap, DIB) at 2X higher horizontal resolution than requested, then resize it to the final dimension.\n\nI used Ghostscript (GS) to obtain the bitmap of a pdf page (antialiased fonts) (Image 1) then resized it (result: Image 2). Compare with Image 4) - GS output without any modification; The method produces some color artifacts that on some LCDs can be annoying.\n\nTo me, it seems that font appearance is more consistently preserved in Img 2 vs Adobe (img 3) and still readable at small sizes, but the color artifacts make this method still not very successful.\n\nPlease let me know what do you think about the results shown bellow:\n\n1. Ghostscript image: Original bitmap used to render the text: 2X size (180% zoom)  \n2. Ghostscript image: Final text obtained by resizing 1) to 1X (90% zoom).  \n3. Adobe image: The same text as in 2) rendered in Adobe Acrobat reader 94.  \n4. Ghostscript image: Text at 1X (90% zoom) without modifications.\n\n ![](http://web.archive.org/web/20130817215657im_/http:/typophile.com/files/T3_All2_4481.PNG)\n\nThanks in advance for any comments\n\n",
  "author": "pinguin",
  "time": "13 Aug 2008 — 12:21pm",
  "uid": "35228",
  "comments": [
    {
      "time": "13 Aug 2008 — 1:58pm",
      "content": "This particular approach to LCD-specific rendering has the virtue of being very simple. It has the defect of having much worse color-fringing artifacts than the approaches used by Microsoft and Adobe, and being less flexible in its use of the sub-pixels.\n\nRegards,\n\nT\n\n"
    },
    {
      "time": "15 Aug 2008 — 9:38am",
      "content": "Thanks for your input Thomas.\n\nFrom your comment and from the lack of responses I get that the only positive thing about this subpixel rendering approach is its simplicity.\n\nAs you did not comment at all on the result obtained (img 2) I suspect that for a typographer's eye the fonts look really bad.\n\nI am certainly aware of the color fringing problem. I can also see myself that img2 has a lot of other problems, e.g. distortion on the Y axis (due to a very elementary resizing algorithm on this axis).\n\nI am currently trying to find a way to get read of the color fringing.  \nFirst,however, I wanted to find out if this is really worth the effort.\n\nThe main reason I started the thread is that I would like to find out if in addition to color fringing, for a typographer's eye font rendered using this approach have some other major flaws that I cannot see.\n\n_In other words, let's assume that I can get rid of the color problem (without losing sharpness): do you still see other major problems with this approach? Also take into account that the overall result depends on the quality of the input 2X-sized font. As you can see some stem do not have equal widths, but I think this can be improved._\n\nIn addition, I would not compare yet this crude SubLCD implementation with the optimized Cleartype or Cooltype. Both Cleartype and Cooltype are optimized to avoid color fringing. This however, it seems to me it is done at the expense of font shape and crispness.\n\nI have tried to apply a Cleartype-like algorithm for correcting color fringes, as described by Steve Gibson in his subpixel rendering page, on top of SubLCD, however, this obviously results in loss of sharpness.\n\nIn any case thanks again for the comment.\n\nP.S. I assumed that I would get more feedback from a typography site. As it did not happen (I cannot exclude that this is due to low quality of the approach compared to the professional standards...), I would be curious if you know about other possible groups where I could get more feedback on this kind of problems.\n\n"
    },
    {
      "time": "19 Aug 2008 — 3:17am",
      "content": "\" I assumed that I would get more feedback from a typography site.\"  \nThe fact is your work is little better or worse than what Apple did fairly quickly and with little fanfare, or what MS did very slowly and with much chest pounding and self-back slapping ballyhoo. In low resolutions, there is no solution that 'works for every font' without either destroying the letters, or the reader. Except for careful hinting, which was never tested, and which is not allowed in OS's, there are no good solutions, except, not to play. Apple strips most of the hints, and MS... some (try finding out which), leaving the traditional access between type designer and user, denied. We've discussed this for several years, and are not exactly freshly leaping to the topic any longer, for very good reason.\n\nCheers!\n\n"
    },
    {
      "time": "19 Aug 2008 — 1:40pm",
      "content": "As I understand it, any LCD-optimized imaging method is going to have a trade-off between color fringing and sharpness. There are schemes to try to optimize this, which I suspect are mostly highly proprietary - as David alludes to - so it will be tough to get people to tell you about them in detail. (In fact, I've just said about as much as I can comfortably say on the subject.)\n\nNote that Microsoft has sponsored research showing that there is considerable individual variation in perception/sensitivity to color fringing. So you can't necessarily assume that your own perception is typical in this area. MS's findings were that something like 10-15% (IIRC) of people were extra-sensitive. The percentage was higher among computer geeks.\n\nCheers,\n\nT\n\n"
    },
    {
      "time": "19 Aug 2008 — 2:55pm",
      "content": "\\>The fact is your work is little better or worse than what Apple did fairly quickly\n\nAs I recall Apple changed the algorithm/filters with each subsequent update to OS X - it didn't seem to be quick at the time, and there were initially many complaints around blurriness. The lack of fanfare shouldn't have been a surprise, given the fact that their implementation of the technology followed Microsoft’s “discovery” and announcement of the technique.\n\n"
    },
    {
      "time": "4 Sep 2008 — 6:12am",
      "content": "Thomas: \"So you can’t necessarily assume that your own perception is typical in this area.\"\n\nBut on the other hand, you can be surer in certain environments, that when you specify your type to be BLACK (at any size), you get black type. :)\n\nSimon: \"...there were initially many complaints around blurriness...\"\n\nDah! and then most of their hardware went on to resolutions higher than 72 dpi.\n\nSimon: \"...given the fact that their implementation of the technology followed Microsoft’s “discovery”...\n\nLol! You'd have to redefine \"technology\", “discovery”, \"announcement\" and \"technique\", as you are using them here.\n\nAnd, here's a quiz just for Simon: Which came first, World War II, or World War I?\n\nCheers!\n\n"
    }
  ]
}
