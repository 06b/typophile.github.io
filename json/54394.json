{
  "id": "54394",
  "title": "Adobe Utopia: Glyph size in Type 1 versus OpenType",
  "forum": "Build",
  "tags": [
    "Build"
  ],
  "content": "Let us assume a publisher has a paperback, the first edition of which was typeset in 8 on 9 point in Adobe Utopia, PS font (PostScript Type 1, font file UTRG\\_\\_\\_\\_.PFB).\n\nFor the re-edition, the publisher wants to switch to Adobe Utopia, OT font (OpenType, font file UtopiaStd-Regular.otf).\n\nTo his dismay, the publisher discovers that Utopia OT typeset in 8 on 9 point is much smaller than Utopia PS typeset in 8 on 9 point.\n\nsee [http://www.sanskritweb.net/temporary/utopia1.gif](http://web.archive.org/web/20131022040126/http:/www.sanskritweb.net/temporary/utopia1.gif \"http://www.sanskritweb.net/temporary/utopia1.gif\")\n\nA technical analysis reveals that for the generation of the Utopia OT font, the glyphs of the Utopia PS font were reduced by 5 percent by Adobe.\n\nExample: The glyph of the capital \"A\" of Utopia PS has a height of 692 units, while the \"A\" of Utopia OT is 657 units high, which is 95 % of 692, i.e. reduction by 5 %.\n\nsee [http://www.sanskritweb.net/temporary/utopia2.gif](http://web.archive.org/web/20131022040126/http:/www.sanskritweb.net/temporary/utopia2.gif \"http://www.sanskritweb.net/temporary/utopia2.gif\")\n\nSo, if the publisher, for technical reasons, must use the OT font format for the re-edition, he himself has to convert the old PS font to the OT format via Fontlab instead of using Adobe's OT font which reduced the glyph size by 5 percent thus rendering Adobe's OT font unusable for the re-edition of the paperback.\n\nWhy did Adobe reduce the glyph size?\n\n",
  "author": "Uli",
  "time": "4 Feb 2009 — 1:44am",
  "uid": "11274",
  "comments": [
    {
      "time": "4 Feb 2009 — 5:54am",
      "content": "Converting the old PS to OT doesn't really make sense, because he won't have any of the features for which he bought the OT version?\n\nWhy not just experiment with a larger pointsize, untill it matches the PS version?\n\n"
    },
    {
      "time": "4 Feb 2009 — 6:10am",
      "content": "692 : 657 · 8 ≅ 8.43\n\nUtopia Std is not Utopia, just like Frutiger Next is not Frutiger. The idea behind changing the name of the font is to stress the fact that there is no guarantee whatsoever that the new edition is compatible with the old edition in design details, proportions, linespacing, letterfitting, kerning etc.\n\nA.\n\n"
    },
    {
      "time": "4 Feb 2009 — 7:34am",
      "content": "I agree with Mr. Twardoch that Utopia Std is not the same as Utopia, but experimenting with a larger point size, as suggested by Mr. Geertsma, is no practical solution due to rounding errors. Most word processors do not permit of using fractional point sizes such as 8.123456789 pt. Why reduced Adobe the glyph size?\n\n"
    },
    {
      "time": "4 Feb 2009 — 8:33am",
      "content": "Many Adobe Originals have undergone smaller or larger redraws when developing the OpenType versions — mostly for aesthetic reasons. Utopia was Robert Slimbach's first typeface that he ever did for Adobe, so I'm not surprised he revised it. I consider Utopia Std a \"director's cut\".\n\nI wish he'd had more time on that project so a Pro version could be developed, on the other hand, the OpenType development project was huge at that time, so they were all working under a very tight schedule. Perhaps this will still happen.\n\n"
    },
    {
      "time": "4 Feb 2009 — 11:20am",
      "content": "Quincunx: 'Converting the old PS to OT doesn’t really make sense, because he won’t have any of the features for which he bought the OT version?'\n\nProbably the Adobe EULA does not permit the enduser to convert fonts anyway. Having said that, it **is** technically possible to import the features from the original OpenType font into a converted one using DTL OTMaster (OTM) or to generate a new OpenType font in DTL FontMaster (FM) using the original features.\n\nIn OTM one can export and import the GSUB and GPOS features from and into an OpenType font. During import OTM compiles the OpenType Layout features (AFDKO syntax) and produces binary OpenType Layout tables. Before importing in the new font probably some editing of the features file will be necessary, for instance to match the character set of the newly generated OpenType font, and perhaps the syntax has to be checked also. Because of the different x-heights and subsequently widths, it is in this case advisable to remove the kern pairs and to replace these by the ones in the AFM file.\n\nFor generating an OpenType font with the original features in FM, a little bit more work has to be done beforehand, but handling the features is easier because these don't have to match the character set. First in OTM the features file of the original OpenType font has to be exported. Second, a so called Character Layout (.cha) file has to be exported from OTM also (this assures that the naming convention in the .cha file is identical to the one used in the features file). An encoding vector has to be added to the .cha file (in this case the Adobe Standard Encoding will do) for instance with a simple find and replace file in/with BBEdit/AppleScript.  \nIn BezierMaster the original font can be converted to BE format and the (checked) features file can be connected in the UFM dialog. In this case the character set does not have to match the characters listed in the features file, because all features that are not covered by the character set (listed in the .cha file) will be removed during the generation of the font by the modified URW++ version of Adobe's Hatch Open Type tool (HOT). One can also add a few lines to the features files concerning the intermediate table block info (this way one can control which information is taken from the features file and which not [if somebody is interested I can provide more technical info on how the features generation is automated and controlled in FM]). For the kerning the AFM file of the PostScript Type1 font can be directly used.\n\n"
    },
    {
      "time": "4 Feb 2009 — 11:25am",
      "content": "\\>Probably the Adobe EULA does not permit the enduser to convert fonts anyway.\n\nThe EULA may prohibit it, but the FAQ definitely allows format conversions -\n\n[http://www.adobe.com/type/topics/licenseqa.html#q25](http://web.archive.org/web/20131022040126/http:/www.adobe.com/type/topics/licenseqa.html#q25 \"http://www.adobe.com/type/topics/licenseqa.html#q25\")\n\n"
    },
    {
      "time": "4 Feb 2009 — 1:44pm",
      "content": "\\> The EULA may prohibit it\n\nIt should be mentioned that the original Type 1 font Utopia was declared as sort of \"public domain\" by Adobe Inc.\n\nsee [http://tug.org/fonts/utopia/LICENSE-utopia.txt](http://web.archive.org/web/20131022040126/http:/tug.org/fonts/utopia/LICENSE-utopia.txt \"http://tug.org/fonts/utopia/LICENSE-utopia.txt\")\n\n"
    },
    {
      "time": "4 Feb 2009 — 2:13pm",
      "content": "\"sort of\" public domain fonts are my favorite kind\n\n"
    },
    {
      "time": "4 Feb 2009 — 3:02pm",
      "content": "Si is right, and not just about conversion. Adobe, in its pre-OT days, always allowed any editing of a font _provided_ that the font was not resold and every user of the changed font had a valid license to the underlying Adobe edition of the font. This has been extensively documented on lists and newsgroups, with the definitive answers always supplied by Adobe's David Lemon. If only everyone else followed Adobe's lead in this respect!\n\n"
    },
    {
      "time": "4 Feb 2009 — 3:14pm",
      "content": "I promised not to harp on about the apparent contradictions between the current Adobe font EULA and the FAQ, so I won’t. But it’s interesting that although other font vendors adopted many aspects of Adobe's font licensing model, they’ve backed away from providing liberal modification and conversion rights.\n\n"
    },
    {
      "time": "4 Feb 2009 — 4:53pm",
      "content": "So does Adobe still allow mods to be made?\n\n"
    },
    {
      "time": "4 Feb 2009 — 6:27pm",
      "content": "Did you follow the link? ;-)\n\n\"Can a user modify a typeface using font manipulation software such as Macromedia Fontographer (formerly Altys Fontographer)?\n\nCustomers are allowed to use font manipulation software to produce \"derivatives\" of typefaces licensed from Adobe, as long as they use the derivatives in accordance with the same licensing terms that are stated on the packaging for the original Type 1 products. For instance, it is legal to use Fontographer to convert a Type 1 typeface from Adobe into TrueType format for individual usage, but it is strictly illegal to assume ownership of the derivative TrueType typeface and to sell it or give it away. Derivative works are definitely protected under copyright law, and Adobe will pursue its property rights vigorously.\"\n\n"
    },
    {
      "time": "4 Feb 2009 — 9:12pm",
      "content": "No I didn't ;-)\n\nWhat I meant was, does Adobe still allow this, even with OT fonts?\n\n"
    },
    {
      "time": "4 Feb 2009 — 9:54pm",
      "content": "Well the FAQ is on their site, and it doesn't say it only applies to older fonts. However as mentioned the current Adobe font EULA might contradict the FAQ - but I don't want to talk about that.\n\n"
    },
    {
      "time": "4 Feb 2009 — 10:13pm",
      "content": "sii:\n\n<cite>“sort of” public domain fonts are my favorite kind</cite>\n\nI used \"sort of\" PD, because fonts are not copyrightable software.\n\nHere is more on the \"sort of\" PD font Utopia:\n\n[http://ospublish.constantvzw.org/type/an-update-on-the-status-of-utopia](http://web.archive.org/web/20131022040126/http:/ospublish.constantvzw.org/type/an-update-on-the-status-of-utopia \"http://ospublish.constantvzw.org/type/an-update-on-the-status-of-utopia\")\n\nIt should be stressed that Adobe's declaration that Utopia is \"sort of\" PD dates back to the early 1990s.\n\nsee for example [http://indology.info/etexts/archive/soft.shtml](http://web.archive.org/web/20131022040126/http:/indology.info/etexts/archive/soft.shtml \"http://indology.info/etexts/archive/soft.shtml\")\n\n"
    },
    {
      "time": "5 Feb 2009 — 2:10pm",
      "content": "Regarding the size change, there's a very simple explanation.\n\nRobert Slimbach redesigned Utopia in its OpenType re-release and retrofitted it with optical size variants. I documented this here several years ago: [http://www.adobe.com/type/opentype/T1\\_to\\_OTF\\_FAQ.htm](http://web.archive.org/web/20131022040126/http:/www.adobe.com/type/opentype/T1_to_OTF_FAQ.htm \"http://www.adobe.com/type/opentype/T1\\_to\\_OTF\\_FAQ.htm\")\n\nBy the way, Google is your friend. The above URL is the second hit under \"Utopia font compatibility OpenType\"....\n\nT\n\n"
    },
    {
      "time": "6 Feb 2009 — 4:09am",
      "content": "Thanks for the link to your own explanations, which are extremely informative.\n\nAvoiding reflows is of great practical importance, considering that e.g. in Germany alone there are more than 10,000 re-editions per year (i.e. second etc. editions of books published often many years ago). Unless you have kept the old font files, you will heve great problems making re-editions of old books without reflow.\n\nAnother great problem are postscript printer drivers. For example, HP's Universal PS printing driver and Adobe's Universal PS printing driver create different reflows of the same book text files. The same holds true for different releases of Adobe's Distiller. All this is a great annoyance.\n\n"
    },
    {
      "time": "6 Feb 2009 — 10:14am",
      "content": "What application are you using where changing the driver results in reflow of the text?\n\nI have seen this only in really non-print-savvy applications, on Windows. (Mind you, that used to include MS Word.)\n\nI should add that as noted elsewhere, if avoiding reflow is critical, and long documents are involved, people should just continue to use the Type 1 versions of the fonts.\n\nT\n\n"
    },
    {
      "time": "6 Feb 2009 — 12:16pm",
      "content": "\\>people should just continue to use the Type 1 versions of the fonts\n\nThat's a good point, and more than that: if a project is important, of course you keep the original font files - - it would be lunacy not to. Many, many responsible foundries will revise their fonts often in much smaller ways: for example Robert finally grew weary of the excessively tight fitting of the question mark in Minion, and longed to change it. I am sure he did in one or another of the dozens of versions of Minion, all of which are different, and all of which will cause reflow problems if you aren't using precisely the same version of the font that you started out with.\n\nWhenever I have to do a new printing of my photography book with a couple of revisions, I use exactly the same operating system and software that I used to create it ten years ago. It's growing increasingly difficult to find the right hardware, but the savings in time, energy and worry is well worth it. I keep whole ancient disk images backed up so I can use them again when necessary. Why not?\n\n"
    },
    {
      "time": "6 Feb 2009 — 2:44pm",
      "content": "\\> <cite>I have seen this only in really non-print-savvy applications, on Windows. (Mind you, that used to include MS Word.)</cite>\n\nIn the mixed journals-plus-books publishing house where I worked until my retirement, in-house editors produce scientific journals with professional publishing programs such as 3B2 (Arbotext), Redline, Pageone etc., but out-of-house book authors are scientists writing their books at home using simple MS Word in most cases.\n\n\\> <cite>Whenever I have to do a new printing of my photography book with a couple of revisions, I use exactly the same operating system and software that I used to create it ten years ago. It’s growing increasingly difficult to find the right hardware, but the savings in time, energy and worry is well worth it.</cite>\n\nYou can say that again! In 2006, I embarked on the adventurous task of creating a PDF file of an old book of mine, the 4th printed edition of which was published in 1989, i.e. 17 years ago. For this purpose, I had to install Windows 3.11 and MS Word 6.0 and Adobe Acrobat Distiller 2.1, and using the then PS Type 1 version of the Palatino font, I could create a flawless PDF file without any reflow at all. The file of this book is downloadable here\n\n[http://www.sanskritweb.net/verlag/buchkalkulation.pdf](http://web.archive.org/web/20131022040126/http:/www.sanskritweb.net/verlag/buchkalkulation.pdf \"http://www.sanskritweb.net/verlag/buchkalkulation.pdf\")\n\nHave a look at the Acrobat \"Documents Properties\" menue, and you will see that this PDF file was produced using the ancient Acrobat Distiller 2.1 for Windows and has the old Palatino fonts embedded which were compatible with the then built-in fonts of the ancient QMS 810 Laser printer used at that time.\n\n"
    },
    {
      "time": "6 Feb 2009 — 3:14pm",
      "content": "\\> In OTM one can export and import the GSUB and GPOS  \n\\> features from and into an OpenType font. During  \n\\> import OTM compiles the OpenType Layout features  \n\\> (AFDKO syntax) and produces binary OpenType Layout tables.\n\nI think this is a great functionality. Ever since its release in 2002, FontLab 4.x and FontLab Studio 5 was able to decompile binary OpenType Layout features into the AFDKO syntax, and compile them back into binary tables, and this functionality was greatly appreciated by the users, so I'm very glad that DTL OTMaster has this function now as well — this is a very appropriate application to have this.\n\nIt would be really great if DTL considered implementing export to the VOLT project syntax as well (and possibly also the TSIV, TSID, TSIP and TSIS tables used by VOLT).\n\nBest,  \nAdam\n\n"
    },
    {
      "time": "8 Feb 2009 — 2:05am",
      "content": "Adam Twardoch: 'Ever since its release in 2002, FontLab 4.x and FontLab Studio 5 was able to decompile binary OpenType Layout features into the AFDKO syntax, and compile them back into binary tables [...]'\n\nNot being familiar with either FL 4 or FLS 5, I am not able to judge the quality of the decompiling and compiling of the features in these apps. Also I can't judge the consistency of the OpenType fonts generated with FLS and therefor the necessity to check, change or enhance the data with a tool like OTM.\n\nAs far as I know, FLS supports the AFDKO 1.6 currently (please correct me if I am wrong), whereas OTM supports the latest standard, i.e. the newly released version 2.5 (FM supports 2.0, but is being updated to 2.5). So, for this fact alone OTM could be a useful additional tool for your customers too, I reckon.\n\n"
    },
    {
      "time": "15 Feb 2009 — 10:17am",
      "content": "Indeed, FontLab Studio 5 currently only supports AFDKO 1.6, with AFDKO 2.5 being planned for FontLab Studio 6. I think OTMaster is an excellent tool for people who are interested in bringing their fonts up to the most current standard.\n\nBest,  \nAdam\n\n"
    }
  ]
}
