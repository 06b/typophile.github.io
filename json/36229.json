{
  "id": "36229",
  "title": "Connecting AFDKO & FontForge",
  "forum": "Build",
  "tags": [
    "Build"
  ],
  "content": "Though I'm not sure if it's nescessary at all, is it possible to connect AFDKO to FontForge?\n\n",
  "author": "typovar",
  "time": "17 Aug 2007 — 9:23am",
  "uid": "14112",
  "comments": [
    {
      "time": "17 Aug 2007 — 10:12am",
      "content": "\\> _Though I’m not sure if it’s nescessary at all_\n\nCan you generate OpenType CFF fonts with FontForge?\n\n\\> _is it possible to connect AFDKO to FontForge?_\n\nWhat kind of connection do you have in mind? For example, FontLab uses the AFDKO source code internally so that users can output OT CFF fonts. But one can also only output a Type 1 font from FontLab and build the OT CFF with the standalone AFDKO.\n\n"
    },
    {
      "time": "17 Aug 2007 — 1:32pm",
      "content": "Typovar,\n\nif you'd prefer not to use FontForge's output for OpenType PS (CFF), generate a Type 1 font from FontForge and then use AFDKO to convert it to OpenType.\n\nAdam\n\n"
    },
    {
      "time": "18 Aug 2007 — 1:51am",
      "content": "Thanks for the respons!\n\nI was indeed thinking about something Miguel said: _\"Using the AFDKO source code internally\"_. But according to Adam, Fontforge generates OppenType PS (CFF) as well.\n\nIs there any difference (technically) in the fonts generated by the two programms?  \nAnd what about \"error-checking\", does AFDKO has somekind of \"quality-check\" built-in to check curves and glyphs? Different from FontForge? Better? More industry-standard/compliant?\n\nBefore investing time and money in somekind of comparisson of the possibilities, I thought I'd better ask here first.\n\nArjen\n\n"
    },
    {
      "time": "18 Aug 2007 — 4:50am",
      "content": "The AFDKO is a kit containing a set of tools for OpenType font development. The most notable of those tools is MakeOTF, which is the one that, provided with the necessary files, generates OpenType CFF fonts (.otf). I believe this is the code that FontLab and FontMaster carry under the hood.  \nIn addition to MakeOTF, there are several other tools for tasks such as hinting, testing, and a few macros for FontLab. Here's a small list of some of the other tools included in the AFDKO:\n\nAutohint — for hinting PFA (Type 1) files. (It is also able to operate on OTF files, but it's not recommended as the resulting font won't be subroutinized, and thus will have a bigger file size)  \nCheckOutlines — reports outline-construction errors. Can operate in PFA and OTF files.  \nCompareFamily — reports problems found across a family of fonts (OTFs), and in each font individually. (AFAIK, this is the only font development tool in the world that checks the consistency of a font family).  \nspot — reports the font’s OpenType data. OT tables can be dumped to a text file, or shown graphically by generating a PostScript file.  \ntx — for analyzing and converting the glyph-outline data of TrueType fonts and all OpenType font formats. It can output the results in several formats, including PDF.\n\nBrief explanation and usage examples of these tools is provided here:  \n [http://blogs.adobe.com/typblography/typotechnica2007/TypoTechnica2007\\_Fo...](http://web.archive.org/web/20150414001834/http:/blogs.adobe.com/typblography/typotechnica2007/TypoTechnica2007_FontProduction_at_Adobe.pdf \"http://blogs.adobe.com/typblography/typotechnica2007/TypoTechnica2007\\_FontProduction\\_at\\_Adobe.pdf\")  \n [http://blogs.adobe.com/typblography/typotechnica2007/TypoTechnica2007\\_St...](http://web.archive.org/web/20150414001834/http:/blogs.adobe.com/typblography/typotechnica2007/TypoTechnica2007_StateOfTheArt_Font_QE.pdf \"http://blogs.adobe.com/typblography/typotechnica2007/TypoTechnica2007\\_StateOfTheArt\\_Font\\_QE.pdf\")  \n [http://blogs.adobe.com/typblography/typotechnica2007/QE\\_Outputs.pdf](http://web.archive.org/web/20150414001834/http:/blogs.adobe.com/typblography/typotechnica2007/QE_Outputs.pdf \"http://blogs.adobe.com/typblography/typotechnica2007/QE\\_Outputs.pdf\")\n\n"
    },
    {
      "time": "18 Aug 2007 — 5:15am",
      "content": "Thanks for the links, Miguel! I assume these are the ones you mentioned in your session at TypeCon?\n\nChrisL\n\n"
    },
    {
      "time": "18 Aug 2007 — 5:19am",
      "content": "\\> _Better? More industry-standard/compliant?_\n\nThrough the AFDKO, Adobe makes publicly available the exact same tools that are used in-house for building and testing its fonts. What you or other parties eventually do with it won't necessarily be better or worse. The only guarantee is that whoever uses the AFDKO tools has the potential to make fonts as good as Adobe's (technically at least).  \nDeciding for one tool or another will also depend on your workflow, platform, preferences, computer skills, needs, etc.\n\n"
    },
    {
      "time": "18 Aug 2007 — 5:17am",
      "content": "Yes, I think so Chris.\n\n"
    },
    {
      "time": "18 Aug 2007 — 6:02am",
      "content": "\\> Can you generate OpenType CFF fonts with FontForge?\n\nFor information on the output formats of fontforge, you can look [here](http://web.archive.org/web/20150414001834/http:/fontforge.sourceforge.net/overview.html#PT).\n\n"
    },
    {
      "time": "18 Aug 2007 — 7:18am",
      "content": "<cite>Is there any difference (technically) in the fonts generated by the two programms?</cite>\n\nYou could use TTX to convert both FontForge- and AFDKO-generated OTFs into the .ttx format (xml representation of OTFs) and compare the tables' content. Ideally, you would use a FontForge-generated OTF as input for AFDKO, so you can compare what both tools do with 'the same font'.\n\nKarsten\n\n"
    },
    {
      "time": "19 Aug 2007 — 5:36am",
      "content": "Enough reading to fill the rest of this weekend; Thanks very much.  \nThere is a particular line in the \"ReadMe for AFDKO\" which made me wonder about this:  \n  \n_ **3. AFDKO Installation Guide**  \n\\< cut something here ...\\>  \nIf you have previously installed the AFKDO v 2.0, you can simply replace the old FDK directory with new one, **and, if you are using the scripts for FontLab, run the script \"FDK/Tools/FontLab/installFontLabMacros\", and you will not need to do anything else.** _    \nIf it's possible to install the macro's in FontLab, it should be able to install it in FontForge... Any suggestions in how to do this?\n\n"
    },
    {
      "time": "19 Aug 2007 — 12:14pm",
      "content": "As to your quote from the Installation Guide, the non-bolded and the bolded sections refer to different parts of AFDKO.  \nThe first: to the AFDKO which is an independent set of tools (MakeOTF, compareFamily, etc).  \nThe second: to the (additional) macros for FontLab which must be run from within FontLab Studio and rely on FLS's own Python API and are supposed to modify FLS's font files -- so it is rather unlikely that these will work in FontForge.\n\n"
    },
    {
      "time": "21 Aug 2007 — 4:50am",
      "content": "'[...] I believe this is the code that FontLab and FontMaster carry under the hood. [...]'\n\nYes, the DTL FontMaster OpenType functionality is based on the SDK. A major difference with FontLab (you must correct me if I am wrong) is that the GSUB and GPOS features listed in the used features file(s) don't have to match the glyph set(s) for generating OT fonts. Features that are not covered by the characters in the outputted font are simply removed during generation. This way it is possible to use features files globally, i.e. for a complete library. New features can be added to a central features file and by generating all applicable OT fonts in batch, subsequently all these fonts will contain the new defined features. Or glyphs can be added to the databases and when covered by the features file re-generating the fonts will result in new features also.\n\nThe features files can also be used locally, i.e. per font and contain the necessary naming and metrics info for a particular font. When used globally in batch this info is taken from the UFM files belonging to the glyph databases (these are connected by file name). The kern info is taken then from an attached AFM or kern.fea file. Switching between the naming and metrics info in the features file and the information in the UFM and kern files can be done by adding a few lines at the end of the features files and subsequently activating or de-activating these.\n\n"
    },
    {
      "time": "21 Aug 2007 — 1:37pm",
      "content": "\"If it’s possible to install the macro’s in FontLab, it should be able to install it in FontForge\"\n\nNot without work. FontForge's python interface is not identical to FontLab's (I don't know how different they are, but George Williams generally avoids even looking at FontLab for intellectual property reasons). I've considered porting the AFDKO macros to FontForge, but it isn't particularly interesting work, and I don't need it myself (and I haven't heard of anyone else who would be interested until now).\n\nAnother issue for me is that the autohinting module (probably the most interesting part of the AFDKO) is contained in a Windows DLL (presumably the Mac version has the Mac equivalent), which I can't use in Linux, anyway, so the incentive is reduced.\n\n"
    }
  ]
}
