{
  "id": "106184",
  "title": "the unicode of accented characters in Word",
  "forum": "Build",
  "tags": [
    "accented characters",
    "Unicode",
    "Vietnamese",
    "Word",
    "Build"
  ],
  "content": "We work with packaging for many countries and has to deal with many languages, many we don't read and with alphabets we don't recognize. To control this we use software to control that the unicode values are the same in input (text in Word documents) and output (pdf generated from QuarkXpress) We are now struggling with differences in input & output for accented characters in Vietnamese text. So I wonder if the accented characters in Word can be the input (the characters you type) and not the result (the accented character)  \nOr is there an other explanation of the different unicode values for the same character? (the visual character is correct, this is verified by vietnamese)\n\n",
  "author": "trine rask",
  "time": "9 Sep 2013 — 2:11am",
  "uid": "9980",
  "comments": [
    {
      "time": "9 Sep 2013 — 6:39pm",
      "content": "With Vietnamese, it occurred to me that even a simple copy paste with TextEdit in a .txt file on the Macintosh did not preserve the sequence of unicode characters. Both texts looked the same but were only [Unicode equivalent](http://web.archive.org/web/20140809092056/http:/en.wikipedia.org/wiki/Unicode_equivalence). For instance, the unicode character\n\n    1EBF LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE\n\nis equivalent to the three characters (its NFD decomposition)\n\n    0065 LATIN SMALL LETTER E\n      0302 COMBINING CIRCUMFLEX ACCENT\n      0301 COMBINING ACUTE ACCENT\n\nTo compare two strings str1 and str2, you then need to compare their normalized forms. With Python, you can use the [unicodedata](http://web.archive.org/web/20140809092056/http:/docs.python.org/2/library/unicodedata.html) library; with Java, there is the [Class Normalizer](http://web.archive.org/web/20140809092056/http:/docs.oracle.com/javase/7/docs/api/java/text/Normalizer.html).\n\nOn the Mac or on Linux, given two utf-8 encoded .txt files, you can simply normalize both line by line and then compare the normalized outputs with diff.\n\n"
    },
    {
      "time": "13 Sep 2013 — 11:18am",
      "content": "[duplicate copy removed]\n\n"
    },
    {
      "time": "13 Sep 2013 — 11:14am",
      "content": "[duplicate copy removed]\n\n"
    },
    {
      "time": "13 Sep 2013 — 11:12am",
      "content": "Concerning the \"copy-paste\", see [http://www.typophile.com/node/105171#comment-562222](http://web.archive.org/web/20140809092056/http:/www.typophile.com/node/105171#comment-562222 \"http://www.typophile.com/node/105171#comment-562222\")\n\n"
    }
  ]
}
