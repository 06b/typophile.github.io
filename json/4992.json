{
  "id": "4992",
  "title": "Printer Help",
  "forum": "General Discussions",
  "tags": [

  ],
  "content": "I bought an HP business inkjet 1100 which works fine but prints incomplete text (missing characters, even missing lines) when using the Adobe Type Mannager Deluxe to load postscript fonts, when this program is off text prints ok, but when it�s on words start disspearing from printed text, even using true type fonts.   \n   \nI am using a pc running win 98 second edition and adobe type mannager to load fonts.   \n   \nI would like to know if someone else is using this printer on windows and using ATM as well.   \n   \nAnyone who know how to fix the problem? I have tried all of the available HP drivers and patches.\n\n",
  "author": "rs_donsata",
  "time": "29 May, 2004 - 10:34am",
  "uid": "1530",
  "comments": [
    {
      "time": " 30 May, 2004 - 12:10pm",
      "content": "I was confused, true type fonts do print well while ATM is on,the problem being postscript fonts. Should I upgrade the operting system? or consider converting my postscript fonts to true type? Do converted fonts work well?\n\n"
    },
    {
      "time": " 30 May, 2004 - 9:35pm",
      "content": "I converted a couple of postscript fonts to true type format, they worked but had a couple of bugs:   \n   \n1) They had a bunch of innecesary extra vector points in the outlines, specially on curves   \n   \n2) They rendered awfully on screen   \n   \nIs there a way to avoid this?\n\n"
    },
    {
      "time": " 31 May, 2004 - 9:19pm",
      "content": "Doing a clean format conversion is not trivial - Fontographer for example is pretty hopeless. But FontLab is supposed to be really good, and there are some small stand-alone utilities for doing that which also have good reps.   \n   \nhhp\n\n"
    },
    {
      "time": " 31 May, 2004 - 9:58pm",
      "content": "I fooled around a bit and assume that the vector points apparition is implicit in the switch between cuadratic and cubic curves.   \n   \nWhat about screen rendering ?\n\n"
    },
    {
      "time": " 1 June, 2004 - 10:10am",
      "content": "TT curves need more on-curve points, but fewer BCPs, than PS. But some conversion algorithms (like Fog's) brute-force it and put way too many points - and sometimes ruin things too. Try this for example: take an \"s\" that has no explicit inflection points in its spine (so just a point at each end of each spine curve - nothing in the middle) and convert it to TT...   \n   \nScreen rendering:   \nActually, unless the hinting is totally ruined (something Fog would probably do though...) the TT renderer will generally do a better job than the PS renderer! But if not what you can do is turn on anti-aliasing for all PPEM sizes. You can use FontLab or VTT to do this.   \n   \nhhp\n\n"
    },
    {
      "time": " 1 June, 2004 - 10:21am",
      "content": "Actually, TT curves need more total points, period, for reasonably equivalent curves in all but a few simple cases. However, it's certainly true that most conversion approaches tend to use more points than one might think necessary in an attempt to get a closer match to the original. This occurs because you can't make a perfect match to cubic curves with quadratic curves (though you can going the other direction).   \n   \nContrary to what Hrant suggests, it is my experience that auto-hinted TrueType generally does not render as well as auto-hinted Type 1. You can of course do a lot more with manual TrueType hinting, but when we're talking simple conversions without manual work, yes, the rendering generally suffers. Even if you do it in FontLab. Turning on anti-aliasing for all sizes will help, though.   \n   \nT\n\n"
    },
    {
      "time": " 1 June, 2004 - 10:34am",
      "content": "I guess any conversion entails a loss of efficiency\\*, which accounts for both the increase in points and the decrease in hinting quality. But doesn't the same thing happen the other way? Take a good TT font, convert it to PS, and you'll end up with more points and worse rendering. So I suspect it depends on the quality of the conversion most of all.   \n   \n\\* Are you sure PS to TT is lossless?   \n   \nAs for on-screen rendering quality, it's pretty clear to me that the TT algorithms are much better - it's just that it's harder to take proper advantage of them. Like stickshift versus automatic transmission. Certainly in Windows, PS rendering is the pits - and on the Mac you had bitmaps to help out - although no longer, since they've now adopted the full-fuzz delusions.   \n   \nhhp\n\n"
    },
    {
      "time": " 1 June, 2004 - 10:56am",
      "content": "No, this isn't a matter of \"loss of efficiency.\" Given a constant em square, the cubics used by PostScript are a higher order math than the quadratics used by TrueType. They are a superset. You can go the one way losslessly, and not the other.   \n   \nI'm taking it from this discussion that you have never read my article on font formats. It's available in various locations, including here:   \n [http://www.font.to/downloads/TT\\_PS\\_OT.pdf](http://web.archive.org/web/20051111115233/http:/www.font.to/downloads/TT_PS_OT.pdf)   \n   \nThere's no question that \\*if\\* one puts manual hinting work in, TrueType will look better than Type 1 in Windows in apps that use the OS rendering. It also helps if the developer manually fixes up the outlines, if they were converted from Type 1. However, we're talking about automated conversions. In such cases, they generally look the same as or worse than the original.   \n   \nSo, yes, the TrueType format has a bazillion capabilities that Type 1 lacks. But hardly any of these get used particularly well in simply converted fonts that have not had any manual work. Even with pretty good converters, it has always been my observation that Type 1 fonts converted to TrueType render about equally well at best, and generally look worse.   \n   \nWhen you're talking Apple's current OS X rendering, it's not at all clear to me that there is any reason that even superhinted TrueType should fare any better than auto-hinted Type 1.   \n   \nRegards,   \n   \nT\n\n"
    },
    {
      "time": " 1 June, 2004 - 11:03am",
      "content": "OK, I get it.   \n   \n\\> Type 1 fonts converted to TrueType render about   \n\\> equally well at best, and generally look worse.   \n   \nWhat about the other way around?   \n   \nOSX: I didn't say TT would fare better, in fact I was trying to say that everything fares worse (except really dumb fonts).   \n   \nhhp\n\n"
    },
    {
      "time": " 1 June, 2004 - 11:33am",
      "content": "H�ctor, converting the fonts from T1 to TT is a good short-term solution to your printer problem, but you should really upgrade your OS, to Win2k or WinXP. You'll be able to work with T1 and OT fonts, without ATM.\n\n"
    },
    {
      "time": " 1 June, 2004 - 1:55pm",
      "content": "Back on the Type 1 to TrueType angle again, I should add that my comments about TT autohinter quality are solely for the readily available retail-priced solutions. Various companies have proprietary or high-end TT autohinters that may do a significantly better job. Ditto the outline conversion.   \n   \nNow, going from TrueType to Type 1, the outlines aren't harmed any, and the readily available auto-hinters are pretty good (and likely to improve more soon). But mostly it depends on how well hinted the TrueType was, and the particular imaging environment. Getting worse and getting better are both pretty plausible outcomes, as is \"different but equal.\"   \n   \nCheers,   \n   \nT\n\n"
    },
    {
      "time": " 2 June, 2004 - 12:05am",
      "content": "I tested the printer on a pc running Win2k and it worked fine so �ll take the upgrade after finishing my school final exam projects in a coumple of weeks. On the mean time i�m working with a couple of Type 1 converted families, they ruin my beautiful layouts on screen but print well.   \n   \nThanks !!\n\n"
    }
  ]
}
