{
  "id": "6373",
  "title": "Fontlab classbased kerning",
  "forum": "Build",
  "tags": [

  ],
  "content": "I�m just starting out with classbased kerning, and now I�m wondering: is there any way to make classes of glyphs that share the same, for example, left side form?   \nLike n and m. And when you put them to the right of say an o they kern the same...   \nGuess there is no way of doing that, huh?   \nIt would be a great timesaver though..\n\n",
  "author": "toby",
  "time": "Thu, 2004-08-26 01:36",
  "uid": "3070",
  "comments": [
    {
      "time": " Thu, 2004-08-26 05:24",
      "content": "Tobias,   \n   \neach FontLab kerning class has a \"kerning scope\", i.e. the information whether the kerning duplication should happen when the master glyph of a kerning class is used as first glyph or second glyph in a pair. This is what the checkboxes in Tools / Kerning Assistance define.   \n   \nFor example, you may have FontLab kerning classes (defined in the Classes panel):   \n\\_e1: e' oe eacute edieresis   \n\\_e2: e' eacute edieresis   \n\\_o1: o' oacute odieresis   \n\\_o2: o' oe oacute odieresis   \n\\_y: y' yacute ydieresis   \n   \nIn Kerning assistance, \\_e1 and \\_o1 should have first glyph scope only, i.e. they should be activated only via the checkbox on the left side. This is because the kerning duplication is supposed to happen only when the master glyph of the class occurs as the first glyph in the pair.   \n   \nAnalogically, \\_e2 and \\_o2 should be activated only via the checkbox on the right side because the kerning duplication is supposed to happen only when the master glyph of the class occurs as the second glyph in the pair.   \n   \nFinally, \\_y can be activated on both sides since kerning should be duplicated in all situations.   \n   \nKerning classes don't need to limit themselves to accented glyphs only. In your case, you could make a class with the 2nd glyph scope (checkbox on the right side in Kerning Assistance) like following:   \n   \n\\_m2: m' n ncedilla nacute   \n   \nNothing stops you from doing that.   \n   \nHowever, it is true that in FontLab's own class kerning, classes cannot include classes, so something like:   \n\\_n: n' ncedilla nacute   \n\\_m2: m' @\\_n   \nis not possible.   \n   \n\"Class inheritance\" is possible if you define your kerning directly in the OpenType panel (which is not the most user friendly thing to do ![:-)](http://web.archive.org/web/20050526122607im_/http:/www.typophile.com/forums/clipart/happy.gif) ) In the lower-right part of the OpenType panel, you can write OpenType class definitions:   \n   \n@\\_n = [n ncedilla nacute];   \n@\\_m2 = [m @\\_n];   \n   \nBut I don't think this is useful for kerning. But Class inheritance is useful for writing other OpenType layout feature definitions. For example, you might define classes for default figures and old-style figures (to be used in the \"onum\" feature, for example) as well as a class for all figures (to be used in a different feature, e.g. \"sups\"):   \n   \n@FIGS\\_DFLT = [zero one two three four five six seven eight nine];   \n@FIGS\\_ONUM = [zero.onum one.onum two.onum three.onum four.onum five.onum six.onum seven.onum eight.onum nine.onum];   \n@FIGS\\_ALL = [@FIGS\\_DFLT @FIGS\\_ONUM];   \n   \nRegards,   \nAdam Twardoch   \nFontlab Ltd.\n\n"
    },
    {
      "time": " Thu, 2004-08-26 09:27",
      "content": "OK, I think I got most of that, and I was on it myself too.   \nThanks a lot. Let�s say I�ve made a class called   \n\\_kern-o-rightside, which has glyphs that share the same left side form: c, o, � etc. If I�d like to kern them with K, to make Ko, then I must make a class of K also, even if K would be alone in that class?   \nIt would be a bit more logical if you could just type the key glyphs in the metrics/kerning window, and in the pop-up window there (which now just shows the classes) choose which classes to add the kerning to. In metrics mode you can copy to the classes, why not in kern mode?   \n   \nApart from that I think FL is a great program .   \nThe drawing tools are superior, very smooth and nice.   \n   \nOne more thing - if I now have the \\_kernK class on the left and say the \\_kern-o-rightside on the right, and then also add the ordinary \\_kern-o to the \\_kernK, there will be some kernpair duplicates, am I wrong?\n\n"
    },
    {
      "time": " Thu, 2004-08-26 10:33",
      "content": "You don't need to have one-glyph classes. In FontLab, you always kern glyphs. The classes only contain information to which \\_other\\_ glyphs one wants the kerning values to apply.   \n   \n\\> Let�s say I�ve made a class called   \n   \nGo to Kerning Assistance and activate the checkbox next to \\_kern-o-rightside in the right list, but make sure the checkbox is deactivated in the left list. Then just kern K and o.   \n   \n\\> In metrics mode you can copy   \n\\> to the classes, why not in kern mode?   \n   \nEach individual glyph has to have metrics, so the metrics need to be physically copied. With kerning, it's different. OpenType fonts retain the class kerning informatio internally. That means, that if you make OpenType fonts, then in FontLab, you don't need to \\_copy\\_ the kerning values, you just define the class. Within the OT font, it's the classes that hold the kerning values. The physical copying of the kerning values from, say, o to oacute only happens in OpenType-savvy applications during typesetting. On the other hand, Type 1 fonts don't have class kerning internally, so prior to generating such a font, you need to expand the kerning, i.e. physically copy the kerning values to, say, K o to K oacute. This is why the class metrics and class kerning are handled differently.   \n   \n\\> if I now have the \\_kernK class on the   \n\\> left and say the \\_kern-o-rightside on   \n\\> the right, and then also add the   \n\\> ordinary \\_kern-o to the \\_kernK, there   \n\\> will be some kernpair duplicates,   \n\\> am I wrong?   \n   \nI don't know exactly what you mean by \"ordinary \\_kern-o\". Each kerning class can have four different kerning scopes: \"scope 1\" = \"none\" (no checkboxes in Kerning Assistance active), \"scope 1\" = \"1st glyph in pair-only\" (left checkbox active), \"scope 2\" = \"2nd glyph in pair-only\" (right checkbox active), and \"scope 3\" = \"both glyphs in pair\" (both checkboxes active).   \n   \nOf course, it is not a good idea to define two classes with the same master glyph where one class would be a scope 1 class and the other class would be a scope 3 class. Fortunately, since only glyphs are kerned in FontLab, it is not possible to create a situation where, say, a kern pair of \"K\" \"\\_kern-o\" would have one value and \"K\" \"\\_kern-o-right\" would have a different value. Because in FontLab, you only kern \"K\" and \"o\". If \"o\" is a master glyph in two classes, then the kerning values will be propagated to all glyphs in both classes -- always adhering to the scopes. The higher scope takes precedence, so if \"o\" is a master glyph and \"odiereis\" a child glyph in two classes, where one of the classes is scope 1 and the other is scope 3, then the kerning will be duplicated in scope 3, i.e. when the glyph is in either position within the kerning pair.   \n   \nHaving this said, it is still better to make sure that for each master glyph, you never have a scope 3 class and either a scope 1 or a scope 2 class at the same time. Kerning Assistance in (not yet released) FontLab Studio 5 will have a button \"Check for overlap\" that will track such situations.   \n   \nRegards,   \nAdam\n\n"
    },
    {
      "time": " Thu, 2004-08-26 11:02",
      "content": "It�s clear now, thank you.   \nBefore, I generated a test type1-font and the kerning didn�t work, that�s why I thought I needed to make one-glyph-classes. But it didnt work cause I forgot to expand...\n\n"
    }
  ]
}
